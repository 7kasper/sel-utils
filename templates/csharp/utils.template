--- start utils ---
{{assembly}}
{{about}}
{{buffer}}
{{stream}}
{{length_prefixed_type}}
{{packet}}
{{variant}}
{{metadata}} // remove when metadata is properly implemented
--- end ---
--- start assembly ../Properties/AssemblyInfo.cs ---
using System.Reflection;
using System.Runtime.CompilerServices;

[assembly: AssemblyTitle ("sel-utils")]
[assembly: AssemblyDescription ("{{DESCRIPTION}}")]
[assembly: AssemblyVersion ("1.2.{{VERSION}}")]
--- end ---
--- start about Utils/About.cs ---
namespace sul.Utils
{

	public class About
	{

		public const string Website = "{{WEBSITE}}";

		public const int Version = {{VERSION}};

	}

}
--- end ---
--- start buffer Utils/Buffer.cs ---
using System.IO;
using System.Text;

namespace sul.Utils
{

	public class Buffer
	{

		private BinaryWriter writer;
		private BinaryReader reader;

		public Buffer(BinaryWriter writer)
		{
			this.writer = writer;
		}

		public Buffer(BinaryReader reader)
		{
			this.reader = reader;
		}

		public byte[] ToArray()
		{
			return ((MemoryStream)writer.BaseStream).ToArray();
		}

		// writing

		public void WriteBytes(byte[] value)
		{
			this.writer.Write(value);
		}

		public void WriteString(string value)
		{
			WriteBytes(Encoding.UTF8.GetBytes(value));
		}

		public void WriteBool(bool value)
		{
			this.writer.Write(value);
		}

		public void WriteByte(sbyte value)
		{
			this.writer.Write(value);
		}

		public void WriteUbyte(byte value)
		{
			this.writer.Write(value);
		}

		public void WriteBigEndianShort(short value) {}

		public void WriteLittleEndianShort(short value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianUshort(ushort value) {}

		public void WriteLittleEndianUshort(ushort value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianUshort(int value)
		{
			WriteBigEndianUshort((ushort)value);
		}

		public void WriteLittleEndianUshort(int value)
		{
			WriteLittleEndianUshort((ushort)value);
		}

		public void WriteBigEndianTriad(int value) {}

		public void WriteLittleEndianTriad(int value) {
			
		}

		public void WriteBigEndianInt(int value) {}

		public void WriteLittleEndianInt(int value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianUint(uint value) {}

		public void WriteLittleEndianUint(uint value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianUint(int value)
		{
			WriteBigEndianUint((uint)value);
		}

		public void WriteLittleEndianUint(int value)
		{
			WriteLittleEndianUint((uint)value);
		}

		public void WriteBigEndianLong(long value) {}

		public void WriteLittleEndianLong(long value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianUlong(ulong value) {}

		public void WriteLittleEndianUlong(ulong value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianFloat(float value) {}

		public void WriteLittleEndianFloat(float value) {
			this.writer.Write(value);
		}

		public void WriteBigEndianDouble(double value) {}

		public void WriteLittleEndianDouble(double value) {
			this.writer.Write(value);
		}

		public void WriteVarshort(short value) {}

		public void WriteVarushort(ushort value) {}

		public void WriteVarint(int value) {}

		public void WriteVaruint(uint value) {}

		public void WriteVaruint(int value)
		{
			WriteVaruint((uint)value);
		}

		public void WriteVarlong(long value) {}

		public void WriteVarulong(ulong value) {}

		public void WriteUuid(System.Guid value) {
			WriteBytes(value.ToByteArray());
		}

		// reading

		public byte[] ReadBytes(int length)
		{
			return reader.ReadBytes(length);
		}

		public bool ReadBool()
		{
			return reader.ReadBoolean();
		}

		public sbyte ReadByte()
		{
			return reader.ReadSByte();
		}

		public byte ReadUbyte()
		{
			return reader.ReadByte();
		}

		public uint ReadVaruint()
		{
			return 0; //TODO
		}

		public System.Guid readUuid()
		{
			return new System.Guid(ReadBytes(16));
		}

		//

		public static Buffer Writer()
		{
			return new Buffer(new BinaryWriter(new MemoryStream()));
		}

		public static Buffer Reader(byte[] _buffer)
		{
			return new Buffer(new BinaryReader(new MemoryStream(_buffer)));
		}

	}

}
--- end ---
--- start stream Utils/Stream.cs ---
namespace sul.Utils
{

	public abstract class Stream
	{

		public virtual byte[] Encode()
		{
			var buffer = Buffer.Writer();
			EncodeImpl(buffer);
			return buffer.ToArray();
		}

		public virtual Stream Decode(byte[] _buffer)
		{
			var buffer = Buffer.Reader(_buffer);
			DecodeImpl(buffer);
			return this;
		}

		public virtual void EncodeBody(Buffer buffer)
		{
			EncodeImpl(buffer);
		}

		public virtual void DecodeBody(Buffer buffer)
		{
			DecodeImpl(buffer);
		}

		protected abstract void EncodeImpl(Buffer buffer);

		protected abstract void DecodeImpl(Buffer buffer);

	}

}
--- end ---
--- start length_prefixed_type Utils/LengthPrefixedType.cs ---
namespace sul.Utils
{

	public abstract class LengthPrefixedType : Stream
	{

		public override void EncodeBody(Buffer buffer)
		{
			var _buffer = Buffer.Writer();
			EncodeImpl(_buffer);
			var encoded = _buffer.ToArray();
			EncodeLength(encoded.Length, buffer);
			buffer.WriteBytes(encoded);
		}

		public override void DecodeBody(Buffer buffer)
		{
			DecodeImpl(Buffer.Reader(buffer.ReadBytes(DecodeLength(buffer))));
		}

		protected abstract void EncodeLength(int length, Buffer buffer);

		protected abstract int DecodeLength(Buffer buffer);

	}

}
--- end ---
--- start packet Utils/Packet.cs ---
namespace sul.Utils
{

	public abstract class Packet : Stream
	{

		public abstract int GetId();

		public byte[] EncodeWithoutId()
		{
			return base.Encode();
		}

		public Stream DecodeWithoutId(byte[] _buffer)
		{
			return base.Decode(_buffer);
		}

		public override byte[] Encode()
		{
			var buffer = Buffer.Writer();
			EncodeId(buffer);
			EncodeBody(buffer);
			return buffer.ToArray();
		}

		public override Stream Decode(byte[] _buffer)
		{
			var buffer = Buffer.Reader(_buffer);
			DecodeId(buffer);
			DecodeBody(buffer);
			return this;
		}

		public abstract void EncodeId(Buffer buffer);

		public abstract void DecodeId(Buffer buffer);

	}

}
--- end ---
--- start variant Utils/Variant.cs ---
namespace sul.Utils
{

	public abstract class Variant : Packet
	{

		private Packet packet;

		public Variant(Packet packet)
		{
			this.packet = packet;
		}

		public override int GetId()
		{
			return this.packet.GetId();
		}

		public override void EncodeId(Buffer buffer)
		{
			this.packet.EncodeId(buffer);
		}

		public override void DecodeId(Buffer buffer)
		{
			this.packet.DecodeId(buffer);
		}

	}

}
--- end ---

dummy type, just to allow compilation
--- start metadata Utils/Metadata.cs ---
namespace sul.Utils
{

	public class Metadata : Stream
	{

		protected override void EncodeImpl(Buffer _buffer)
		{}

		protected override void DecodeImpl(Buffer _buffer)
		{}

	}

}
--- end ---
