/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft316.xml
 */
module sul.protocol.minecraft316.types;

import std.bitmanip : write, peek;
import std.conv : to;
import std.system : Endian;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.buffer;
import sul.utils.var;

import sul.metadata.minecraft316;

struct Statistic {

	public enum string[] FIELDS = ["name", "value"];

	public string name;
	public uint value;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(varuint.encode(cast(uint)name.length)); writeString(name);
			writeBytes(varuint.encode(value));
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			uint bmftzq=varuint.decode(_buffer, &_index); name=readString(bmftzq);
			value=varuint.decode(_buffer, &_index);
		}
	}

}

struct BlockChange {

	public enum string[] FIELDS = ["xz", "y", "block"];

	public ubyte xz;
	public ubyte y;
	public uint block;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianUbyte(xz);
			writeBigEndianUbyte(y);
			writeBytes(varuint.encode(block));
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			xz=readBigEndianUbyte();
			y=readBigEndianUbyte();
			block=varuint.decode(_buffer, &_index);
		}
	}

}

struct Slot {

	public enum string[] FIELDS = ["id", "count", "damage", "nbt"];

	public short id;
	public ubyte count;
	public ushort damage;
	public ubyte[] nbt;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianShort(id);
			if(id>0){ writeBigEndianUbyte(count); }
			if(id>0){ writeBigEndianUshort(damage); }
			if(id>0){ writeBytes(nbt); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			id=readBigEndianShort();
			if(id>0){ count=readBigEndianUbyte(); }
			if(id>0){ damage=readBigEndianUshort(); }
			if(id>0){ nbt=_buffer[_index..$].dup; _index=_buffer.length; }
		}
	}

}

struct Icon {

	// direction and type
	public enum ubyte WHITE_ARROW = 0;
	public enum ubyte GREEN_ARROW = 1;
	public enum ubyte RED_ARROW = 2;
	public enum ubyte BLUE_ARROW = 3;
	public enum ubyte WHITE_CROSS = 4;
	public enum ubyte RED_POINTER = 5;
	public enum ubyte WHITE_CIRCLE = 6;
	public enum ubyte SMALL_WHITE_CIRCLE = 7;
	public enum ubyte MANSION = 8;
	public enum ubyte TEMPLE = 9;

	public enum string[] FIELDS = ["directionAndType", "position"];

	public ubyte directionAndType;
	public Tuple!(ubyte, "x", ubyte, "z") position;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianUbyte(directionAndType);
			writeBigEndianUbyte(position.x); writeBigEndianUbyte(position.z);
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			directionAndType=readBigEndianUbyte();
			position.x=readBigEndianUbyte(); position.z=readBigEndianUbyte();
		}
	}

}

struct Property {

	public enum string[] FIELDS = ["name", "value", "signed", "signature"];

	public string name;
	public string value;
	public bool signed;
	public string signature;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(varuint.encode(cast(uint)name.length)); writeString(name);
			writeBytes(varuint.encode(cast(uint)value.length)); writeString(value);
			writeBigEndianBool(signed);
			if(signed==true){ writeBytes(varuint.encode(cast(uint)signature.length)); writeString(signature); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			uint bmftzq=varuint.decode(_buffer, &_index); name=readString(bmftzq);
			uint dmfsdwu=varuint.decode(_buffer, &_index); value=readString(dmfsdwu);
			signed=readBigEndianBool();
			if(signed==true){ uint c2lnbmf0dxjl=varuint.decode(_buffer, &_index); signature=readString(c2lnbmf0dxjl); }
		}
	}

}

struct ListAddPlayer {

	// gamemode
	public enum uint SURVIVAL = 0;
	public enum uint CREATIVE = 1;
	public enum uint ADVENTURE = 2;
	public enum uint SPECTATOR = 3;

	public enum string[] FIELDS = ["uuid", "name", "properties", "gamemode", "latency", "hasDisplayName", "displayName"];

	public UUID uuid;
	public string name;
	public sul.protocol.minecraft316.types.Property[] properties;
	public uint gamemode;
	public uint latency;
	public bool hasDisplayName;
	public string displayName;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(uuid.data);
			writeBytes(varuint.encode(cast(uint)name.length)); writeString(name);
			writeBytes(varuint.encode(cast(uint)properties.length)); foreach(chjvcgvydgllcw;properties){ chjvcgvydgllcw.encode(bufferInstance); }
			writeBytes(varuint.encode(gamemode));
			writeBytes(varuint.encode(latency));
			writeBigEndianBool(hasDisplayName);
			if(hasDisplayName==true){ writeBytes(varuint.encode(cast(uint)displayName.length)); writeString(displayName); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
			uint bmftzq=varuint.decode(_buffer, &_index); name=readString(bmftzq);
			properties.length=varuint.decode(_buffer, &_index); foreach(ref chjvcgvydgllcw;properties){ chjvcgvydgllcw.decode(bufferInstance); }
			gamemode=varuint.decode(_buffer, &_index);
			latency=varuint.decode(_buffer, &_index);
			hasDisplayName=readBigEndianBool();
			if(hasDisplayName==true){ uint zglzcgxheu5hbwu=varuint.decode(_buffer, &_index); displayName=readString(zglzcgxheu5hbwu); }
		}
	}

}

struct ListUpdateGamemode {

	// gamemode
	public enum uint SURVIVAL = 0;
	public enum uint CREATIVE = 1;
	public enum uint ADVENTURE = 2;
	public enum uint SPECTATOR = 3;

	public enum string[] FIELDS = ["uuid", "gamemode"];

	public UUID uuid;
	public uint gamemode;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(uuid.data);
			writeBytes(varuint.encode(gamemode));
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
			gamemode=varuint.decode(_buffer, &_index);
		}
	}

}

struct ListUpdateLatency {

	public enum string[] FIELDS = ["uuid", "latency"];

	public UUID uuid;
	public uint latency;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(uuid.data);
			writeBytes(varuint.encode(latency));
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
			latency=varuint.decode(_buffer, &_index);
		}
	}

}

struct ListUpdateDisplayName {

	public enum string[] FIELDS = ["uuid", "hasDisplayName", "displayName"];

	public UUID uuid;
	public bool hasDisplayName;
	public string displayName;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(uuid.data);
			writeBigEndianBool(hasDisplayName);
			if(hasDisplayName==true){ writeBytes(varuint.encode(cast(uint)displayName.length)); writeString(displayName); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
			hasDisplayName=readBigEndianBool();
			if(hasDisplayName==true){ uint zglzcgxheu5hbwu=varuint.decode(_buffer, &_index); displayName=readString(zglzcgxheu5hbwu); }
		}
	}

}

struct Modifier {

	// operation
	public enum ubyte ADD_SUBSTRACT_AMOUNT = 0;
	public enum ubyte ADD_SUBSTRACT_AMOUNT_PERCENTAGE = 1;
	public enum ubyte MULTIPLY_AMOUNT_PERCENTAGE = 2;

	public enum string[] FIELDS = ["uuid", "amount", "operation"];

	public UUID uuid;
	public double amount;
	public ubyte operation;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(uuid.data);
			writeBigEndianDouble(amount);
			writeBigEndianUbyte(operation);
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
			amount=readBigEndianDouble();
			operation=readBigEndianUbyte();
		}
	}

}

struct Attribute {

	public enum string[] FIELDS = ["key", "value", "modifiers"];

	public string key;
	public double value;
	public sul.protocol.minecraft316.types.Modifier[] modifiers;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBytes(varuint.encode(cast(uint)key.length)); writeString(key);
			writeBigEndianDouble(value);
			writeBytes(varuint.encode(cast(uint)modifiers.length)); foreach(bw9kawzpzxjz;modifiers){ bw9kawzpzxjz.encode(bufferInstance); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			uint a2v5=varuint.decode(_buffer, &_index); key=readString(a2v5);
			value=readBigEndianDouble();
			modifiers.length=varuint.decode(_buffer, &_index); foreach(ref bw9kawzpzxjz;modifiers){ bw9kawzpzxjz.decode(bufferInstance); }
		}
	}

}

struct OptionalPosition {

	public enum string[] FIELDS = ["hasPosition", "position"];

	public bool hasPosition;
	public ulong position;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianBool(hasPosition);
			if(hasPosition==true){ writeBigEndianUlong(position); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			hasPosition=readBigEndianBool();
			if(hasPosition==true){ position=readBigEndianUlong(); }
		}
	}

}

struct OptionalUuid {

	public enum string[] FIELDS = ["hasUuid", "uuid"];

	public bool hasUuid;
	public UUID uuid;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianBool(hasUuid);
			writeBytes(uuid.data);
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			hasUuid=readBigEndianBool();
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
		}
	}

}
