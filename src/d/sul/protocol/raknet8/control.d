/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
module sul.protocol.raknet8.control;

import std.bitmanip : write, read;
import std.conv : to;
import std.system : Endian;
import std.typetuple : TypeTuple;
import std.uuid : UUID;

import sul.utils.var;

import types = sul.protocol.raknet8.types;

alias Packets = TypeTuple!(Ack, Nack, Encapsulated);

struct Ack {

	public enum ubyte ID = 192;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = true;

	public types.Acknowledge[] packets;

	public ubyte[] encode(bool writeId=true)() {
		ubyte[] buffer;
		static if(writeId){ buffer~=ID; }
		buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(buffer, packets.length.to!ushort, buffer.length-ushort.sizeof);foreach(cGFja2V0cw;packets){ cGFja2V0cw.encode(buffer); }
		return buffer;
	}

	public typeof(this) decode(bool readId=true)(ubyte[] buffer) {
		static if(readId){ typeof(ID) _id; if(buffer.length>=ubyte.sizeof){ _id=read!(ubyte, Endian.bigEndian)(buffer); } }
		if(buffer.length>=ushort.sizeof){ packets.length=read!(ushort, Endian.bigEndian)(buffer); }foreach(ref cGFja2V0cw;packets){ cGFja2V0cw.decode(buffer); }
		return this;
	}

}

struct Nack {

	public enum ubyte ID = 160;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = true;

	public types.Acknowledge[] packets;

	public ubyte[] encode(bool writeId=true)() {
		ubyte[] buffer;
		static if(writeId){ buffer~=ID; }
		buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(buffer, packets.length.to!ushort, buffer.length-ushort.sizeof);foreach(cGFja2V0cw;packets){ cGFja2V0cw.encode(buffer); }
		return buffer;
	}

	public typeof(this) decode(bool readId=true)(ubyte[] buffer) {
		static if(readId){ typeof(ID) _id; if(buffer.length>=ubyte.sizeof){ _id=read!(ubyte, Endian.bigEndian)(buffer); } }
		if(buffer.length>=ushort.sizeof){ packets.length=read!(ushort, Endian.bigEndian)(buffer); }foreach(ref cGFja2V0cw;packets){ cGFja2V0cw.decode(buffer); }
		return this;
	}

}

struct Encapsulated {

	public enum ubyte ID = 132;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = true;

	public int count;
	public types.Encapsulation encapsulation;

	public ubyte[] encode(bool writeId=true)() {
		ubyte[] buffer;
		static if(writeId){ buffer~=ID; }
		buffer.length+=3; buffer[$-3]=count&255; buffer[$-2]=(count>>8)&255; buffer[$-1]=(count>>16)&255;
		encapsulation.encode(buffer);
		return buffer;
	}

	public typeof(this) decode(bool readId=true)(ubyte[] buffer) {
		static if(readId){ typeof(ID) _id; if(buffer.length>=ubyte.sizeof){ _id=read!(ubyte, Endian.bigEndian)(buffer); } }
		if(buffer.length>=3){ count=buffer[0]|(buffer[1]<<8)|(buffer[2]<<16); buffer=buffer[3..$]; }
		encapsulation.decode(buffer);
		return this;
	}

}
