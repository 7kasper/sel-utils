/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
/**
 * Packets used during the authentication process to exchange informations.
 */
module sul.protocol.hncom1.login;

import std.bitmanip : write, peek;
import std.conv : to;
import std.system : Endian;
import std.typetuple : TypeTuple;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.buffer;
import sul.utils.var;

static import sul.protocol.hncom1.types;

alias Packets = TypeTuple!(ConnectionRequest, ConnectionResponse, HubInfo, NodeInfo);

/**
 * First real packet sent by the client with its informations.
 */
class ConnectionRequest : Buffer {

	public enum ubyte ID = 0;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	public enum string[] FIELDS = ["protocol", "password", "name", "main"];

	/**
	 * Version of the protocol used by the client that must match the hub's one
	 */
	public uint protocol;

	/**
	 * Password, if the hub requires one, or an empty string.
	 */
	public string password;

	/**
	 * Name of the node that will be validated by the hub. It should always be lowercase
	 * and only contain letters, numbers and basic punctuation symbols.
	 */
	public string name;

	/**
	 * Indicates whether the node accepts clients when they first connect to the hub or
	 * exclusively when they are manually transferred.
	 */
	public bool main;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(uint protocol, string password=string.init, string name=string.init, bool main=bool.init) {
		this.protocol = protocol;
		this.password = password;
		this.name = name;
		this.main = main;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(protocol));
		writeBytes(varuint.encode(cast(uint)password.length)); writeString(password);
		writeBytes(varuint.encode(cast(uint)name.length)); writeString(name);
		writeBigEndianBool(main);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		protocol=varuint.decode(_buffer, &_index);
		uint cgfzc3dvcmq=varuint.decode(_buffer, &_index); password=readString(cgfzc3dvcmq);
		uint bmftzq=varuint.decode(_buffer, &_index); name=readString(bmftzq);
		main=readBigEndianBool();
	}

	public static pure nothrow @safe ConnectionRequest fromBuffer(bool readId=true)(ubyte[] buffer) {
		ConnectionRequest ret = new ConnectionRequest();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}

/**
 * Reply always sent after the ConnectionRequest packet. It indicates the status of
 * the connection, which is accepted only when every field of the packet is true.
 */
class ConnectionResponse : Buffer {

	public enum ubyte ID = 1;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	// status
	public enum ubyte OK = 0;
	public enum ubyte OUTDATED_HUB = 1;
	public enum ubyte OUTDATED_NODE = 2;
	public enum ubyte PASSWORD_REQUIRED = 3;
	public enum ubyte WRONG_PASSWORD = 4;
	public enum ubyte INVALID_NAME_LENGTH = 5;
	public enum ubyte INVALID_NAME_CHARACTERS = 6;
	public enum ubyte NAME_ALREADY_USED = 7;
	public enum ubyte NAME_RESERVED = 8;

	public enum string[] FIELDS = ["protocol", "status"];

	/**
	 * Protocol used by the hub. It must match the node's one otherwise the connection
	 * cannot be established.
	 */
	public uint protocol;

	/**
	 * Indicates the status of connection. If not 0, it indicates an error.
	 */
	public ubyte status;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(uint protocol, ubyte status=ubyte.init) {
		this.protocol = protocol;
		this.status = status;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(protocol));
		writeBigEndianUbyte(status);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		protocol=varuint.decode(_buffer, &_index);
		status=readBigEndianUbyte();
	}

	public static pure nothrow @safe ConnectionResponse fromBuffer(bool readId=true)(ubyte[] buffer) {
		ConnectionResponse ret = new ConnectionResponse();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}

/**
 * Informations about the hub.
 */
class HubInfo : Buffer {

	public enum ubyte ID = 2;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	public enum string[] FIELDS = ["time", "serverId", "reservedUuids", "displayName", "onlineMode", "gamesInfo", "online", "max", "language", "acceptedLanguages", "socialJson", "additionalJson"];

	public ulong time;
	public ulong serverId;
	public ulong reservedUuids;
	public string displayName;
	public bool onlineMode;
	public sul.protocol.hncom1.types.GameInfo[] gamesInfo;
	public uint online;
	public uint max;
	public string language;
	public string[] acceptedLanguages;

	/**
	 * ---
	 * {
	 * "website": "example.com",
	 * "facebook": "example-official",
	 * "twitter": "example_tweets",
	 * "youtube": "examplechannel",
	 * "instagram": "example",
	 * "google_plus": "example-plus"
	 * }
	 * ---
	 */
	public string socialJson;

	/**
	 * ---
	 * {
	 * "software": {
	 * "name": "SEL",
	 * "version": "1.0.4",
	 * "stable": false
	 * },
	 * "minecraft": {
	 * "edu": false,
	 * "realm": true
	 * },
	 * "system": {
	 * "os": "Ubuntu 16.04",
	 * "cpu": 4,
	 * "cpu_speed": 3.2
	 * "ram": 4294967296
	 * }
	 * }
	 * ---
	 */
	public string additionalJson;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(ulong time, ulong serverId=ulong.init, ulong reservedUuids=ulong.init, string displayName=string.init, bool onlineMode=bool.init, sul.protocol.hncom1.types.GameInfo[] gamesInfo=(sul.protocol.hncom1.types.GameInfo[]).init, uint online=uint.init, uint max=uint.init, string language=string.init, string[] acceptedLanguages=(string[]).init, string socialJson=string.init, string additionalJson=string.init) {
		this.time = time;
		this.serverId = serverId;
		this.reservedUuids = reservedUuids;
		this.displayName = displayName;
		this.onlineMode = onlineMode;
		this.gamesInfo = gamesInfo;
		this.online = online;
		this.max = max;
		this.language = language;
		this.acceptedLanguages = acceptedLanguages;
		this.socialJson = socialJson;
		this.additionalJson = additionalJson;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varulong.encode(time));
		writeBytes(varulong.encode(serverId));
		writeBytes(varulong.encode(reservedUuids));
		writeBytes(varuint.encode(cast(uint)displayName.length)); writeString(displayName);
		writeBigEndianBool(onlineMode);
		writeBytes(varuint.encode(cast(uint)gamesInfo.length)); foreach(z2ftzxnjbmzv;gamesInfo){ z2ftzxnjbmzv.encode(bufferInstance); }
		writeBytes(varuint.encode(online));
		writeBytes(varuint.encode(max));
		writeBytes(varuint.encode(cast(uint)language.length)); writeString(language);
		writeBytes(varuint.encode(cast(uint)acceptedLanguages.length)); foreach(ywnjzxb0zwrmyw5n;acceptedLanguages){ writeBytes(varuint.encode(cast(uint)ywnjzxb0zwrmyw5n.length)); writeString(ywnjzxb0zwrmyw5n); }
		writeBytes(varuint.encode(cast(uint)socialJson.length)); writeString(socialJson);
		writeBytes(varuint.encode(cast(uint)additionalJson.length)); writeString(additionalJson);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		time=varulong.decode(_buffer, &_index);
		serverId=varulong.decode(_buffer, &_index);
		reservedUuids=varulong.decode(_buffer, &_index);
		uint zglzcgxheu5hbwu=varuint.decode(_buffer, &_index); displayName=readString(zglzcgxheu5hbwu);
		onlineMode=readBigEndianBool();
		gamesInfo.length=varuint.decode(_buffer, &_index); foreach(ref z2ftzxnjbmzv;gamesInfo){ z2ftzxnjbmzv.decode(bufferInstance); }
		online=varuint.decode(_buffer, &_index);
		max=varuint.decode(_buffer, &_index);
		uint bgfuz3vhz2u=varuint.decode(_buffer, &_index); language=readString(bgfuz3vhz2u);
		acceptedLanguages.length=varuint.decode(_buffer, &_index); foreach(ref ywnjzxb0zwrmyw5n;acceptedLanguages){ uint exduanp4yjb6d3jt=varuint.decode(_buffer, &_index); ywnjzxb0zwrmyw5n=readString(exduanp4yjb6d3jt); }
		uint c29jawfssnnvbg=varuint.decode(_buffer, &_index); socialJson=readString(c29jawfssnnvbg);
		uint ywrkaxrpb25hbepz=varuint.decode(_buffer, &_index); additionalJson=readString(ywrkaxrpb25hbepz);
	}

	public static pure nothrow @safe HubInfo fromBuffer(bool readId=true)(ubyte[] buffer) {
		HubInfo ret = new HubInfo();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}

/**
 * Informations about the node.
 */
class NodeInfo : Buffer {

	public enum ubyte ID = 3;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	// max
	public enum uint UNLIMITED = 0;

	public enum string[] FIELDS = ["time", "max", "acceptedGames", "plugins"];

	public ulong time;
	public uint max;
	public sul.protocol.hncom1.types.Game[] acceptedGames;
	public sul.protocol.hncom1.types.Plugin[] plugins;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(ulong time, uint max=uint.init, sul.protocol.hncom1.types.Game[] acceptedGames=(sul.protocol.hncom1.types.Game[]).init, sul.protocol.hncom1.types.Plugin[] plugins=(sul.protocol.hncom1.types.Plugin[]).init) {
		this.time = time;
		this.max = max;
		this.acceptedGames = acceptedGames;
		this.plugins = plugins;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varulong.encode(time));
		writeBytes(varuint.encode(max));
		writeBytes(varuint.encode(cast(uint)acceptedGames.length)); foreach(ywnjzxb0zwrhyw1l;acceptedGames){ ywnjzxb0zwrhyw1l.encode(bufferInstance); }
		writeBytes(varuint.encode(cast(uint)plugins.length)); foreach(cgx1z2lucw;plugins){ cgx1z2lucw.encode(bufferInstance); }
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		time=varulong.decode(_buffer, &_index);
		max=varuint.decode(_buffer, &_index);
		acceptedGames.length=varuint.decode(_buffer, &_index); foreach(ref ywnjzxb0zwrhyw1l;acceptedGames){ ywnjzxb0zwrhyw1l.decode(bufferInstance); }
		plugins.length=varuint.decode(_buffer, &_index); foreach(ref cgx1z2lucw;plugins){ cgx1z2lucw.decode(bufferInstance); }
	}

	public static pure nothrow @safe NodeInfo fromBuffer(bool readId=true)(ubyte[] buffer) {
		NodeInfo ret = new NodeInfo();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}
