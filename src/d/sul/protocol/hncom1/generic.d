/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
module sul.protocol.hncom1.generic;

import std.bitmanip : write, peek;
import std.conv : to;
import std.system : Endian;
import std.typetuple : TypeTuple;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.buffer;
import sul.utils.var;

static import sul.protocol.hncom1.types;

alias Packets = TypeTuple!(Logs, RemoteCommand, UpdateList, Reload);

/**
 * Sends node logs to the hub.
 */
class Logs : Buffer {

	public enum ubyte ID = 7;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	public enum string[] FIELDS = ["messages"];

	public sul.protocol.hncom1.types.Log[] messages;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(sul.protocol.hncom1.types.Log[] messages) {
		this.messages = messages;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBytes(varuint.encode(cast(uint)messages.length)); foreach(bwvzc2fnzxm;messages){ bwvzc2fnzxm.encode(bufferInstance); }
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		messages.length=varuint.decode(_buffer, &_index); foreach(ref bwvzc2fnzxm;messages){ bwvzc2fnzxm.decode(bufferInstance); }
	}

	public static pure nothrow @safe Logs fromBuffer(bool readId=true)(ubyte[] buffer) {
		Logs ret = new Logs();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}

/**
 * Executes a command on the node.
 */
class RemoteCommand : Buffer {

	public enum ubyte ID = 8;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	// origin
	public enum ubyte HUB = 0;
	public enum ubyte EXTERNAL_CONSOLE = 1;
	public enum ubyte RCON = 2;

	public enum string[] FIELDS = ["origin", "sender", "command"];

	public ubyte origin;
	public sul.protocol.hncom1.types.Address sender;
	public string command;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(ubyte origin, sul.protocol.hncom1.types.Address sender=sul.protocol.hncom1.types.Address.init, string command=string.init) {
		this.origin = origin;
		this.sender = sender;
		this.command = command;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBigEndianUbyte(origin);
		sender.encode(bufferInstance);
		writeBytes(varuint.encode(cast(uint)command.length)); writeString(command);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		origin=readBigEndianUbyte();
		sender.decode(bufferInstance);
		uint y29tbwfuza=varuint.decode(_buffer, &_index); command=readString(y29tbwfuza);
	}

	public static pure nothrow @safe RemoteCommand fromBuffer(bool readId=true)(ubyte[] buffer) {
		RemoteCommand ret = new RemoteCommand();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}

/**
 * Updates a list.
 */
class UpdateList : Buffer {

	public enum ubyte ID = 9;

	public enum bool CLIENTBOUND = false;
	public enum bool SERVERBOUND = true;

	// list
	public enum ubyte WHITELIST = 0;
	public enum ubyte BLACKLIST = 1;

	// action
	public enum ubyte ADD = 0;
	public enum ubyte REMOVE = 1;

	public enum string[] FIELDS = ["list", "action", "type"];

	public ubyte list;
	public ubyte action;
	public ubyte type;

	public pure nothrow @safe @nogc this() {}

	public pure nothrow @safe @nogc this(ubyte list, ubyte action=ubyte.init, ubyte type=ubyte.init) {
		this.list = list;
		this.action = action;
		this.type = type;
	}

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		writeBigEndianUbyte(list);
		writeBigEndianUbyte(action);
		writeBigEndianUbyte(type);
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
		list=readBigEndianUbyte();
		action=readBigEndianUbyte();
		type=readBigEndianUbyte();
	}

	public static pure nothrow @safe UpdateList fromBuffer(bool readId=true)(ubyte[] buffer) {
		UpdateList ret = new UpdateList();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

	alias _encode = encode;

	enum string variantField = "type";

	alias Variants = TypeTuple!(ByHubId, ByName, ByUuid);

	public class ByHubId {

		public enum typeof(type) TYPE = 0;

		public enum string[] FIELDS = ["hubId"];

		public uint hubId;

		public pure nothrow @safe @nogc this() {}

		public pure nothrow @safe @nogc this(uint hubId) {
			this.hubId = hubId;
		}

		public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
			type = 0;
			_encode!writeId();
			writeBytes(varuint.encode(hubId));
			return _buffer;
		}

		public pure nothrow @safe void decode() {
			hubId=varuint.decode(_buffer, &_index);
		}

	}

	public class ByName {

		public enum typeof(type) TYPE = 1;

		public enum string[] FIELDS = ["username"];

		public string username;

		public pure nothrow @safe @nogc this() {}

		public pure nothrow @safe @nogc this(string username) {
			this.username = username;
		}

		public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
			type = 1;
			_encode!writeId();
			writeBytes(varuint.encode(cast(uint)username.length)); writeString(username);
			return _buffer;
		}

		public pure nothrow @safe void decode() {
			uint dxnlcm5hbwu=varuint.decode(_buffer, &_index); username=readString(dxnlcm5hbwu);
		}

	}

	public class ByUuid {

		public enum typeof(type) TYPE = 2;

		// game
		public enum ubyte POCKET = 1;
		public enum ubyte MINECRAFT = 2;

		public enum string[] FIELDS = ["game", "uuid"];

		public ubyte game;
		public UUID uuid;

		public pure nothrow @safe @nogc this() {}

		public pure nothrow @safe @nogc this(ubyte game, UUID uuid=UUID.init) {
			this.game = game;
			this.uuid = uuid;
		}

		public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
			type = 2;
			_encode!writeId();
			writeBigEndianUbyte(game);
			writeBytes(uuid.data);
			return _buffer;
		}

		public pure nothrow @safe void decode() {
			game=readBigEndianUbyte();
			if(_buffer.length>=_index+16){ ubyte[16] dxvpza=_buffer[_index.._index+16].dup; _index+=16; uuid=UUID(dxvpza); }
		}

	}

}

class Reload : Buffer {

	public enum ubyte ID = 10;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	public enum string[] FIELDS = [];

	public pure nothrow @safe ubyte[] encode(bool writeId=true)() {
		_buffer.length = 0;
		static if(writeId){ writeBigEndianUbyte(ID); }
		return _buffer;
	}

	public pure nothrow @safe void decode(bool readId=true)() {
		static if(readId){ ubyte _id; _id=readBigEndianUbyte(); }
	}

	public static pure nothrow @safe Reload fromBuffer(bool readId=true)(ubyte[] buffer) {
		Reload ret = new Reload();
		ret._buffer = buffer;
		ret.decode!readId();
		return ret;
	}

}
