/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
module sul.protocol.externalconsole1.status;

import std.bitmanip : write, peek;
import std.conv : to;
import std.system : Endian;
import std.typetuple : TypeTuple;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.var;

import types = sul.protocol.externalconsole1.types;

alias Packets = TypeTuple!(KeepAlive, UpdateNodes, UpdateStats);

struct KeepAlive {

	public enum ubyte ID = 0;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = true;

	public uint count;

	public ubyte[] encode(bool writeId=true)() {
		ubyte[] _buffer;
		static if(writeId){ _buffer~=ID; }
		_buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, count, _buffer.length-uint.sizeof);
		return _buffer;
	}

	public typeof(this) decode(bool readId=true)(ubyte[] _buffer, size_t _index=0) {
		return this.decode!readId(_buffer, &_index);
	}

	public typeof(this) decode(bool readId=true)(ubyte[] _buffer, size_t* _index) {
		static if(readId){ typeof(ID) _id; if(_buffer.length>=*_index+ubyte.sizeof){ _id=peek!(ubyte, Endian.bigEndian)(_buffer, _index); } }
		if(_buffer.length>=*_index+uint.sizeof){ count=peek!(uint, Endian.bigEndian)(_buffer, _index); }
		return this;
	}

}

struct UpdateNodes {

	public enum ubyte ID = 1;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	// action
	public enum ubyte ADD = 0;
	public enum ubyte REMOVE = 1;

	public ubyte action;
	public string node;

	public ubyte[] encode(bool writeId=true)() {
		ubyte[] _buffer;
		static if(writeId){ _buffer~=ID; }
		_buffer~=action;
		ubyte[] bm9kZQ=cast(ubyte[])node; _buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(_buffer, bm9kZQ.length.to!ushort, _buffer.length-ushort.sizeof);_buffer~=bm9kZQ;
		return _buffer;
	}

	public typeof(this) decode(bool readId=true)(ubyte[] _buffer, size_t _index=0) {
		return this.decode!readId(_buffer, &_index);
	}

	public typeof(this) decode(bool readId=true)(ubyte[] _buffer, size_t* _index) {
		static if(readId){ typeof(ID) _id; if(_buffer.length>=*_index+ubyte.sizeof){ _id=peek!(ubyte, Endian.bigEndian)(_buffer, _index); } }
		if(_buffer.length>=*_index+ubyte.sizeof){ action=peek!(ubyte, Endian.bigEndian)(_buffer, _index); }
		ubyte[] bm9kZQ; if(_buffer.length>=*_index+ushort.sizeof){ bm9kZQ.length=peek!(ushort, Endian.bigEndian)(_buffer, _index); }if(_buffer.length>=*_index+bm9kZQ.length){ bm9kZQ=_buffer[*_index..*_index+bm9kZQ.length].dup; *_index+=bm9kZQ.length; }; node=cast(string)bm9kZQ;
		return this;
	}

}

struct UpdateStats {

	public enum ubyte ID = 2;

	public enum bool CLIENTBOUND = true;
	public enum bool SERVERBOUND = false;

	public uint onlinePlayers;
	public uint maxPlayers;
	public uint uptime;
	public uint upload;
	public uint download;
	public sul.protocol.externalconsole1.types.NodeStats[] nodes;

	public ubyte[] encode(bool writeId=true)() {
		ubyte[] _buffer;
		static if(writeId){ _buffer~=ID; }
		_buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, onlinePlayers, _buffer.length-uint.sizeof);
		_buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, maxPlayers, _buffer.length-uint.sizeof);
		_buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, uptime, _buffer.length-uint.sizeof);
		_buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, upload, _buffer.length-uint.sizeof);
		_buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, download, _buffer.length-uint.sizeof);
		_buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(_buffer, nodes.length.to!ushort, _buffer.length-ushort.sizeof);foreach(bm9kZXM;nodes){ bm9kZXM.encode(_buffer); }
		return _buffer;
	}

	public typeof(this) decode(bool readId=true)(ubyte[] _buffer, size_t _index=0) {
		return this.decode!readId(_buffer, &_index);
	}

	public typeof(this) decode(bool readId=true)(ubyte[] _buffer, size_t* _index) {
		static if(readId){ typeof(ID) _id; if(_buffer.length>=*_index+ubyte.sizeof){ _id=peek!(ubyte, Endian.bigEndian)(_buffer, _index); } }
		if(_buffer.length>=*_index+uint.sizeof){ onlinePlayers=peek!(uint, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+uint.sizeof){ maxPlayers=peek!(uint, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+uint.sizeof){ uptime=peek!(uint, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+uint.sizeof){ upload=peek!(uint, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+uint.sizeof){ download=peek!(uint, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+ushort.sizeof){ nodes.length=peek!(ushort, Endian.bigEndian)(_buffer, _index); }foreach(ref bm9kZXM;nodes){ bm9kZXM.decode(_buffer, _index); }
		return this;
	}

}
