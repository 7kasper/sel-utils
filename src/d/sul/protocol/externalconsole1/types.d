/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
module sul.protocol.externalconsole1.types;

import std.bitmanip : write, read;
import std.conv : to;
import std.system : Endian;
import std.uuid : UUID;

import sul.utils.var;

struct Game {

	// type
	public enum ubyte POCKET = 1;
	public enum ubyte MINECRAFT = 2;

	public ubyte type;
	public uint[] protocols;

	public void encode(ref ubyte[] buffer) {
		buffer~=type;
		buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(buffer, protocols.length.to!ushort, buffer.length-ushort.sizeof);foreach(cHJvdG9jb2xz;protocols){ buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(buffer, cHJvdG9jb2xz, buffer.length-uint.sizeof); }
	}

	public void decode(ref ubyte[] buffer) {
		if(buffer.length>=ubyte.sizeof){ type=read!(ubyte, Endian.bigEndian)(buffer); }
		if(buffer.length>=ushort.sizeof){ protocols.length=read!(ushort, Endian.bigEndian)(buffer); }foreach(ref cHJvdG9jb2xz;protocols){ if(buffer.length>=uint.sizeof){ cHJvdG9jb2xz=read!(uint, Endian.bigEndian)(buffer); } }
	}

}

struct NodeStats {

	public string name;
	public float tps;
	public ulong ram;
	public float cpu;

	public void encode(ref ubyte[] buffer) {
		ubyte[] bmFtZQ=cast(ubyte[])name; buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(buffer, bmFtZQ.length.to!ushort, buffer.length-ushort.sizeof);buffer~=bmFtZQ;
		buffer.length+=float.sizeof; write!(float, Endian.bigEndian)(buffer, tps, buffer.length-float.sizeof);
		buffer.length+=ulong.sizeof; write!(ulong, Endian.bigEndian)(buffer, ram, buffer.length-ulong.sizeof);
		buffer.length+=float.sizeof; write!(float, Endian.bigEndian)(buffer, cpu, buffer.length-float.sizeof);
	}

	public void decode(ref ubyte[] buffer) {
		ubyte[] bmFtZQ; if(buffer.length>=ushort.sizeof){ bmFtZQ.length=read!(ushort, Endian.bigEndian)(buffer); }if(buffer.length>=bmFtZQ.length){ bmFtZQ=buffer[0..bmFtZQ.length]; buffer=buffer[bmFtZQ.length..$]; }; name=cast(string)bmFtZQ;
		if(buffer.length>=float.sizeof){ tps=read!(float, Endian.bigEndian)(buffer); }
		if(buffer.length>=ulong.sizeof){ ram=read!(ulong, Endian.bigEndian)(buffer); }
		if(buffer.length>=float.sizeof){ cpu=read!(float, Endian.bigEndian)(buffer); }
	}

}
