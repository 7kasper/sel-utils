/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
module sul.protocol.externalconsole1.types;

import std.bitmanip : write, peek;
import std.conv : to;
import std.system : Endian;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.buffer;
import sul.utils.var;

struct Game {

	// type
	public enum ubyte POCKET = 1;
	public enum ubyte MINECRAFT = 2;

	public enum string[] FIELDS = ["type", "protocols"];

	/**
	 * Type of the game. Minecraft indicates the java version of the game and pocket indicates
	 * the versions running on Android, iOS, Windows Phone and Windows 10.
	 */
	public ubyte type;

	/**
	 * List of protocols accepted by the servers for the indicated game.
	 */
	public uint[] protocols;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianUbyte(type);
			writeBigEndianUshort(cast(ushort)protocols.length); foreach(chjvdg9jb2xz;protocols){ writeBigEndianUint(chjvdg9jb2xz); }
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			type=readBigEndianUbyte();
			protocols.length=readBigEndianUshort(); foreach(ref chjvdg9jb2xz;protocols){ chjvdg9jb2xz=readBigEndianUint(); }
		}
	}

}

/**
 * Resource usage of a node.
 */
struct NodeStats {

	public enum string[] FIELDS = ["name", "tps", "ram", "cpu"];

	/**
	 * Name of the node. Should match a name given in [Welcome.Accepted.connectedNodes](#login.welcome.accepted.connected-nodes)
	 * or one added using the UpdateNodes packet.
	 */
	public string name;

	/**
	 * Ticks per second of the node in range 0..20. If the value is less than 20, the server
	 * is lagging.
	 */
	public float tps;

	/**
	 * RAM allocated by the node in bytes.
	 * If the value is 0 the node couldn't retrieve the amount of memory allocated by its
	 * process.
	 */
	public ulong ram;

	/**
	 * Percentage of CPU used by the node. The value can be higher than 100 when the machine
	 * where the node is running has more than one CPU.
	 * If the value is `not a number` the node couldn't retrieve the amount of CPU used
	 * by its process.
	 */
	public float cpu;

	public pure nothrow @safe void encode(Buffer buffer) {
		with(buffer) {
			writeBigEndianUshort(cast(ushort)name.length); writeString(name);
			writeBigEndianFloat(tps);
			writeBigEndianUlong(ram);
			writeBigEndianFloat(cpu);
		}
	}

	public pure nothrow @safe void decode(Buffer buffer) {
		with(buffer) {
			ushort bmftzq=readBigEndianUshort(); name=readString(bmftzq);
			tps=readBigEndianFloat();
			ram=readBigEndianUlong();
			cpu=readBigEndianFloat();
		}
	}

}
