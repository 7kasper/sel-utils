/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
module sul.protocol.externalconsole1.types;

import std.bitmanip : write, peek;
import std.conv : to;
import std.system : Endian;
import std.typecons : Tuple;
import std.uuid : UUID;

import sul.utils.var;

struct Game {

	// type
	public enum ubyte POCKET = 1;
	public enum ubyte MINECRAFT = 2;

	public ubyte type;
	public uint[] protocols;

	public ubyte[] encode() {
		ubyte[] _buffer;
		this.encode(_buffer);
		return _buffer;
	}

	public ubyte[] encode(ref ubyte[] _buffer) {
		_buffer~=type;
		_buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(_buffer, protocols.length.to!ushort, _buffer.length-ushort.sizeof); foreach(cHJvdG9jb2xz;protocols){ _buffer.length+=uint.sizeof; write!(uint, Endian.bigEndian)(_buffer, cHJvdG9jb2xz, _buffer.length-uint.sizeof); }
		return _buffer;
	}

	public typeof(this) decode(ubyte[] _buffer, size_t* _index) {
		if(_buffer.length>=*_index+ubyte.sizeof){ type=peek!(ubyte, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+ushort.sizeof){ protocols.length=peek!(ushort, Endian.bigEndian)(_buffer, _index); } foreach(ref cHJvdG9jb2xz;protocols){ if(_buffer.length>=*_index+uint.sizeof){ cHJvdG9jb2xz=peek!(uint, Endian.bigEndian)(_buffer, _index); } }
		return this;
	}

}

struct NodeStats {

	public string name;
	public float tps;
	public ulong ram;
	public float cpu;

	public ubyte[] encode() {
		ubyte[] _buffer;
		this.encode(_buffer);
		return _buffer;
	}

	public ubyte[] encode(ref ubyte[] _buffer) {
		ubyte[] bmFtZQ=cast(ubyte[])name; _buffer.length+=ushort.sizeof; write!(ushort, Endian.bigEndian)(_buffer, bmFtZQ.length.to!ushort, _buffer.length-ushort.sizeof); _buffer~=bmFtZQ;
		_buffer.length+=float.sizeof; write!(float, Endian.bigEndian)(_buffer, tps, _buffer.length-float.sizeof);
		_buffer.length+=ulong.sizeof; write!(ulong, Endian.bigEndian)(_buffer, ram, _buffer.length-ulong.sizeof);
		_buffer.length+=float.sizeof; write!(float, Endian.bigEndian)(_buffer, cpu, _buffer.length-float.sizeof);
		return _buffer;
	}

	public typeof(this) decode(ubyte[] _buffer, size_t* _index) {
		ubyte[] bmFtZQ; if(_buffer.length>=*_index+ushort.sizeof){ bmFtZQ.length=peek!(ushort, Endian.bigEndian)(_buffer, _index); } if(_buffer.length>=*_index+bmFtZQ.length){ bmFtZQ=_buffer[*_index..*_index+bmFtZQ.length].dup; *_index+=bmFtZQ.length; }; name=cast(string)bmFtZQ;
		if(_buffer.length>=*_index+float.sizeof){ tps=peek!(float, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+ulong.sizeof){ ram=peek!(ulong, Endian.bigEndian)(_buffer, _index); }
		if(_buffer.length>=*_index+float.sizeof){ cpu=peek!(float, Endian.bigEndian)(_buffer, _index); }
		return this;
	}

}
