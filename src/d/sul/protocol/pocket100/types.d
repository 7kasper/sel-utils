/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
module sul.protocol.pocket100.types;

import std.bitmanip : write, read;
import std.conv : to;
import std.system : Endian;
import std.uuid : UUID;

import sul.utils.var;

struct Pack {

	public string id;
	public string vers;
	public ulong size;

	public void encode(ref ubyte[] buffer) {
		ubyte[] aWQ=cast(ubyte[])id; buffer~=varuint.encode(aWQ.length.to!uint);buffer~=aWQ;
		ubyte[] dmVyc2lvbg=cast(ubyte[])version; buffer~=varuint.encode(dmVyc2lvbg.length.to!uint);buffer~=dmVyc2lvbg;
		buffer.length+=ulong.sizeof; write!(ulong, Endian.bigEndian)(buffer, size, buffer.length-ulong.sizeof);
	}

	public void decode(ref ubyte[] buffer) {
		ubyte[] aWQ; aWQ.length=varuint.decode(buffer);if(buffer.length>=aWQ.length){ aWQ=buffer[0..aWQ.length]; buffer=buffer[aWQ.length..$]; }; id=cast(string)aWQ;
		ubyte[] dmVyc2lvbg; dmVyc2lvbg.length=varuint.decode(buffer);if(buffer.length>=dmVyc2lvbg.length){ dmVyc2lvbg=buffer[0..dmVyc2lvbg.length]; buffer=buffer[dmVyc2lvbg.length..$]; }; version=cast(string)dmVyc2lvbg;
		if(buffer.length>=ulong.sizeof){ size=read!(ulong, Endian.bigEndian)(buffer); }
	}

}

struct BlockPosition {

	public int x;
	public uint y;
	public int z;

	public void encode(ref ubyte[] buffer) {
		buffer~=varint.encode(x);
		buffer~=varuint.encode(y);
		buffer~=varint.encode(z);
	}

	public void decode(ref ubyte[] buffer) {
		x=varint.decode(buffer);
		y=varuint.decode(buffer);
		z=varint.decode(buffer);
	}

}

struct Slot {

	public int id;
	public int metaAndCount;
	public types.SlotNbt nbt;

	public void encode(ref ubyte[] buffer) {
		buffer~=varint.encode(id);
		if(id>0){ buffer~=varint.encode(metaAndCount); }
		if(id>0){ nbt.encode(buffer); }
	}

	public void decode(ref ubyte[] buffer) {
		id=varint.decode(buffer);
		if(id>0){ metaAndCount=varint.decode(buffer); }
		if(id>0){ nbt.decode(buffer); }
	}

}

struct Attribute {

	public float min;
	public float max;
	public float value;
	public float def;
	public string name;

	public void encode(ref ubyte[] buffer) {
		buffer.length+=float.sizeof; write!(float, Endian.littleEndian)(buffer, min, buffer.length-float.sizeof);
		buffer.length+=float.sizeof; write!(float, Endian.littleEndian)(buffer, max, buffer.length-float.sizeof);
		buffer.length+=float.sizeof; write!(float, Endian.littleEndian)(buffer, value, buffer.length-float.sizeof);
		buffer.length+=float.sizeof; write!(float, Endian.littleEndian)(buffer, default, buffer.length-float.sizeof);
		ubyte[] bmFtZQ=cast(ubyte[])name; buffer~=varuint.encode(bmFtZQ.length.to!uint);buffer~=bmFtZQ;
	}

	public void decode(ref ubyte[] buffer) {
		if(buffer.length>=float.sizeof){ min=read!(float, Endian.littleEndian)(buffer); }
		if(buffer.length>=float.sizeof){ max=read!(float, Endian.littleEndian)(buffer); }
		if(buffer.length>=float.sizeof){ value=read!(float, Endian.littleEndian)(buffer); }
		if(buffer.length>=float.sizeof){ default=read!(float, Endian.littleEndian)(buffer); }
		ubyte[] bmFtZQ; bmFtZQ.length=varuint.decode(buffer);if(buffer.length>=bmFtZQ.length){ bmFtZQ=buffer[0..bmFtZQ.length]; buffer=buffer[bmFtZQ.length..$]; }; name=cast(string)bmFtZQ;
	}

}

struct Skin {

	public string name;
	public ubyte[] data;

	public void encode(ref ubyte[] buffer) {
		ubyte[] bmFtZQ=cast(ubyte[])name; buffer~=varuint.encode(bmFtZQ.length.to!uint);buffer~=bmFtZQ;
		buffer~=varuint.encode(data.length.to!uint);buffer~=data;
	}

	public void decode(ref ubyte[] buffer) {
		ubyte[] bmFtZQ; bmFtZQ.length=varuint.decode(buffer);if(buffer.length>=bmFtZQ.length){ bmFtZQ=buffer[0..bmFtZQ.length]; buffer=buffer[bmFtZQ.length..$]; }; name=cast(string)bmFtZQ;
		data.length=varuint.decode(buffer);if(buffer.length>=data.length){ data=buffer[0..data.length]; buffer=buffer[data.length..$]; }
	}

}

struct PlayerList {

	public UUID uuid;
	public long entityId;
	public string displayName;
	public types.Skin skin;

	public void encode(ref ubyte[] buffer) {
		buffer~=uuid.data;
		buffer~=varlong.encode(entityId);
		ubyte[] ZGlzcGxheU5hbWU=cast(ubyte[])displayName; buffer~=varuint.encode(ZGlzcGxheU5hbWU.length.to!uint);buffer~=ZGlzcGxheU5hbWU;
		skin.encode(buffer);
	}

	public void decode(ref ubyte[] buffer) {
		if(buffer.length>=16){ ubyte[16] dXVpZA=buffer[0..16]; buffer=buffer[16..$]; uuid=UUID(dXVpZA); }
		entityId=varlong.decode(buffer);
		ubyte[] ZGlzcGxheU5hbWU; ZGlzcGxheU5hbWU.length=varuint.decode(buffer);if(buffer.length>=ZGlzcGxheU5hbWU.length){ ZGlzcGxheU5hbWU=buffer[0..ZGlzcGxheU5hbWU.length]; buffer=buffer[ZGlzcGxheU5hbWU.length..$]; }; displayName=cast(string)ZGlzcGxheU5hbWU;
		skin.decode(buffer);
	}

}
