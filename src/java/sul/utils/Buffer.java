/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 */
package sul.utils;

public class Buffer {

	public byte[] _buffer;

	public int _index;

	public void writeBytes(byte[] a) {
		for(byte b : a) this._buffer[this._index++] = b;
	}

	public byte[] readBytes(int a) {
		byte[] _ret = new byte[a];
		for(int i=0; i<a && this._index<this._buffer.length; i++) _ret[i] = this._buffer[this._index++];
		return _ret;
	}

	public void writeBigEndianByte(byte a) {
		this._buffer[this._index++] = (byte)a;
	}

	public byte readBigEndianByte() {
		if(this._buffer.length < this._index + 1) return (byte)0;
		return (byte)this._buffer[this._index++];
	}

	public void writeLittleEndianByte(byte a) {
		this._buffer[this._index++] = (byte)a;
	}

	public byte readLittleEndianByte() {
		if(this._buffer.length < this._index + 1) return (byte)0;
		return (byte)this._buffer[this._index++];
	}

	public void writeBigEndianShort(short a) {
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a);
	}

	public short readBigEndianShort() {
		if(this._buffer.length < this._index + 2) return (short)0;
		short _ret = 0;
		_ret |= (short)this._buffer[this._index++] << 8;
		_ret |= (short)this._buffer[this._index++];
		return _ret;
	}

	public void writeLittleEndianShort(short a) {
		this._buffer[this._index++] = (byte)(a);
		this._buffer[this._index++] = (byte)(a >>> 8);
	}

	public short readLittleEndianShort() {
		if(this._buffer.length < this._index + 2) return (short)0;
		short _ret = 0;
		_ret |= (short)this._buffer[this._index++];
		_ret |= (short)this._buffer[this._index++] << 8;
		return _ret;
	}

	public void writeBigEndianTriad(int a) {
		this._buffer[this._index++] = (byte)(a >>> 16);
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a);
	}

	public int readBigEndianTriad() {
		if(this._buffer.length < this._index + 3) return (int)0;
		int _ret = 0;
		_ret |= (int)this._buffer[this._index++] << 16;
		_ret |= (int)this._buffer[this._index++] << 8;
		_ret |= (int)this._buffer[this._index++];
		return _ret;
	}

	public void writeLittleEndianTriad(int a) {
		this._buffer[this._index++] = (byte)(a);
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a >>> 16);
	}

	public int readLittleEndianTriad() {
		if(this._buffer.length < this._index + 3) return (int)0;
		int _ret = 0;
		_ret |= (int)this._buffer[this._index++];
		_ret |= (int)this._buffer[this._index++] << 8;
		_ret |= (int)this._buffer[this._index++] << 16;
		return _ret;
	}

	public void writeBigEndianInt(int a) {
		this._buffer[this._index++] = (byte)(a >>> 24);
		this._buffer[this._index++] = (byte)(a >>> 16);
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a);
	}

	public int readBigEndianInt() {
		if(this._buffer.length < this._index + 4) return (int)0;
		int _ret = 0;
		_ret |= (int)this._buffer[this._index++] << 24;
		_ret |= (int)this._buffer[this._index++] << 16;
		_ret |= (int)this._buffer[this._index++] << 8;
		_ret |= (int)this._buffer[this._index++];
		return _ret;
	}

	public void writeLittleEndianInt(int a) {
		this._buffer[this._index++] = (byte)(a);
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a >>> 16);
		this._buffer[this._index++] = (byte)(a >>> 24);
	}

	public int readLittleEndianInt() {
		if(this._buffer.length < this._index + 4) return (int)0;
		int _ret = 0;
		_ret |= (int)this._buffer[this._index++];
		_ret |= (int)this._buffer[this._index++] << 8;
		_ret |= (int)this._buffer[this._index++] << 16;
		_ret |= (int)this._buffer[this._index++] << 24;
		return _ret;
	}

	public void writeBigEndianLong(long a) {
		this._buffer[this._index++] = (byte)(a >>> 56);
		this._buffer[this._index++] = (byte)(a >>> 48);
		this._buffer[this._index++] = (byte)(a >>> 40);
		this._buffer[this._index++] = (byte)(a >>> 32);
		this._buffer[this._index++] = (byte)(a >>> 24);
		this._buffer[this._index++] = (byte)(a >>> 16);
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a);
	}

	public long readBigEndianLong() {
		if(this._buffer.length < this._index + 8) return (long)0;
		long _ret = 0;
		_ret |= (long)this._buffer[this._index++] << 56;
		_ret |= (long)this._buffer[this._index++] << 48;
		_ret |= (long)this._buffer[this._index++] << 40;
		_ret |= (long)this._buffer[this._index++] << 32;
		_ret |= (long)this._buffer[this._index++] << 24;
		_ret |= (long)this._buffer[this._index++] << 16;
		_ret |= (long)this._buffer[this._index++] << 8;
		_ret |= (long)this._buffer[this._index++];
		return _ret;
	}

	public void writeLittleEndianLong(long a) {
		this._buffer[this._index++] = (byte)(a);
		this._buffer[this._index++] = (byte)(a >>> 8);
		this._buffer[this._index++] = (byte)(a >>> 16);
		this._buffer[this._index++] = (byte)(a >>> 24);
		this._buffer[this._index++] = (byte)(a >>> 32);
		this._buffer[this._index++] = (byte)(a >>> 40);
		this._buffer[this._index++] = (byte)(a >>> 48);
		this._buffer[this._index++] = (byte)(a >>> 56);
	}

	public long readLittleEndianLong() {
		if(this._buffer.length < this._index + 8) return (long)0;
		long _ret = 0;
		_ret |= (long)this._buffer[this._index++];
		_ret |= (long)this._buffer[this._index++] << 8;
		_ret |= (long)this._buffer[this._index++] << 16;
		_ret |= (long)this._buffer[this._index++] << 24;
		_ret |= (long)this._buffer[this._index++] << 32;
		_ret |= (long)this._buffer[this._index++] << 40;
		_ret |= (long)this._buffer[this._index++] << 48;
		_ret |= (long)this._buffer[this._index++] << 56;
		return _ret;
	}

	public void writeBigEndianFloat(float a) {
		this.writeBigEndianInt(Float.floatToIntBits(a));
	}

	public float readBigEndianFloat() {
		return Float.intBitsToFloat(this.readBigEndianInt());
	}

	public void writeLittleEndianFloat(float a) {
		this.writeLittleEndianInt(Float.floatToIntBits(a));
	}

	public float readLittleEndianFloat() {
		return Float.intBitsToFloat(this.readLittleEndianInt());
	}

	public void writeBigEndianDouble(double a) {
		this.writeBigEndianLong(Double.doubleToLongBits(a));
	}

	public double readBigEndianDouble() {
		return Double.longBitsToDouble(this.readBigEndianLong());
	}

	public void writeLittleEndianDouble(double a) {
		this.writeLittleEndianLong(Double.doubleToLongBits(a));
	}

	public double readLittleEndianDouble() {
		return Double.longBitsToDouble(this.readLittleEndianLong());
	}

}
