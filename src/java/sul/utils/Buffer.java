/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 */
package sul.utils;

class Buffer {

	protected byte[] buffer;
	protected int index;

	protected final byte writeByteB(byte a) {
		this.buffer[this.index++] = (byte)(a >>> 0);
	}

	protected final byte readByteB() {
		if(this.buffer.length < this.index + 1) return (byte)0;
	}

	protected final byte writeByteL(byte a) {
		this.buffer[this.index++] = (byte)(a >>> 0);
	}

	protected final short writeShortB(short a) {
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 0);
	}

	protected final short readShortB() {
		if(this.buffer.length < this.index + 2) return (short)0;
	}

	protected final short writeShortL(short a) {
		this.buffer[this.index++] = (byte)(a >>> 0);
		this.buffer[this.index++] = (byte)(a >>> 8);
	}

	protected final int writeTriadB(int a) {
		this.buffer[this.index++] = (byte)(a >>> 16);
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 0);
	}

	protected final int readTriadB() {
		if(this.buffer.length < this.index + 3) return (int)0;
	}

	protected final int writeTriadL(int a) {
		this.buffer[this.index++] = (byte)(a >>> 0);
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 16);
	}

	protected final int writeIntB(int a) {
		this.buffer[this.index++] = (byte)(a >>> 24);
		this.buffer[this.index++] = (byte)(a >>> 16);
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 0);
	}

	protected final int readIntB() {
		if(this.buffer.length < this.index + 4) return (int)0;
	}

	protected final int writeIntL(int a) {
		this.buffer[this.index++] = (byte)(a >>> 0);
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 16);
		this.buffer[this.index++] = (byte)(a >>> 24);
	}

	protected final long writeLongB(long a) {
		this.buffer[this.index++] = (byte)(a >>> 56);
		this.buffer[this.index++] = (byte)(a >>> 48);
		this.buffer[this.index++] = (byte)(a >>> 40);
		this.buffer[this.index++] = (byte)(a >>> 32);
		this.buffer[this.index++] = (byte)(a >>> 24);
		this.buffer[this.index++] = (byte)(a >>> 16);
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 0);
	}

	protected final long readLongB() {
		if(this.buffer.length < this.index + 8) return (long)0;
	}

	protected final long writeLongL(long a) {
		this.buffer[this.index++] = (byte)(a >>> 0);
		this.buffer[this.index++] = (byte)(a >>> 8);
		this.buffer[this.index++] = (byte)(a >>> 16);
		this.buffer[this.index++] = (byte)(a >>> 24);
		this.buffer[this.index++] = (byte)(a >>> 32);
		this.buffer[this.index++] = (byte)(a >>> 40);
		this.buffer[this.index++] = (byte)(a >>> 48);
		this.buffer[this.index++] = (byte)(a >>> 56);
	}

}
