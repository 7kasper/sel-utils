/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft315.xml
 */
package sul.protocol.minecraft315.types;

import java.util.UUID;

import sul.utils.*;

public class OptionalUuid extends Packet {

	public boolean hasUuid;
	public UUID uuid;

	public OptionalUuid() {}

	public OptionalUuid(boolean hasUuid, UUID uuid) {
		this.hasUuid = hasUuid;
		this.uuid = uuid;
	}

	@Override
	public int length() {
		return 17;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this._buffer[this._index++]=(byte)(hasUuid?1:0);
		this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		hasUuid=this._index<this._buffer.length&&this._buffer[this._index++]!=0;
		long bxv1awq=readBigEndianLong();long bhv1awq=readBigEndianLong();return new UUID(bxv1awq,bhv1awq);
	}


}
