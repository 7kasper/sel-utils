/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft315.xml
 */
package sul.protocol.minecraft315.clientbound;

import java.util.UUID;

import sul.utils.*;

public class SpawnPlayer extends Packet {

	public final static int ID = (int)5;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	public int entityId;
	public UUID uuid;
	public Tuples.DoubleXYZ position;
	public byte yaw;
	public byte pitch;
	public sul.metadata.Minecraft315 metadata;

	public SpawnPlayer() {}

	public SpawnPlayer(int entityId, UUID uuid, Tuples.DoubleXYZ position, byte yaw, byte pitch, sul.metadata.Minecraft315 metadata) {
		this.entityId = entityId;
		this.uuid = uuid;
		this.position = position;
		this.yaw = yaw;
		this.pitch = pitch;
		this.metadata = metadata;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(ID) + Buffer.varuintLength(entityId) + metadata.length() + 42;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(entityId);
		this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
		this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
		this.writeBigEndianByte(yaw);
		this.writeBigEndianByte(pitch);
		this.writeBytes(metadata.encode());
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		entityId=this.readVaruint();
		long bxv1awq=readBigEndianLong(); long bhv1awq=readBigEndianLong(); uuid=new UUID(bxv1awq,bhv1awq);
		position.x=readBigEndianDouble(); position.y=readBigEndianDouble(); position.z=readBigEndianDouble();
		yaw=readBigEndianByte();
		pitch=readBigEndianByte();
		metadata=new sul.metadata.Minecraft315(); metadata._index=this._index; metadata.decode(this._buffer); this._index=metadata._index;
	}

	public static SpawnPlayer fromBuffer(byte[] buffer) {
		SpawnPlayer ret = new SpawnPlayer();
		ret.decode(buffer);
		return ret;
	}

}
