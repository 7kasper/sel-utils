/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.utils.*;

public class AdventureSettings extends Packet {

	public final static byte ID = (byte)55;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = true;

	// flags
	public final static int IMMUTABLE_WORLD = 1;
	public final static int PVP_DISABLED = 2;
	public final static int PVM_DISABLED = 4;
	public final static int MVP_DISBALED = 8;
	public final static int EVP_DISABLED = 16;
	public final static int AUTO_JUMP = 32;
	public final static int ALLOW_FLIGHT = 64;
	public final static int NO_CLIP = 128;
	public final static int FLYING = 256;

	// permissions
	public final static int USER = 0;
	public final static int OPERATOR = 1;
	public final static int HOST = 2;
	public final static int AUTOMATION = 3;
	public final static int ADMIN = 4;

	public int flags;
	public int permissions;

	public AdventureSettings() {}

	public AdventureSettings(int flags, int permissions) {
		this.flags = flags;
		this.permissions = permissions;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(flags) + Buffer.varuintLength(permissions) + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(flags);
		this.writeVaruint(permissions);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		flags=this.readVaruint();
		permissions=this.readVaruint();
	}

	public static AdventureSettings fromBuffer(byte[] buffer) {
		AdventureSettings ret = new AdventureSettings();
		ret.decode(buffer);
		return ret;
	}

}
