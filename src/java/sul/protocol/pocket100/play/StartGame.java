/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import java.util.UUID;

import sul.protocol.pocket100.types.*;
import sul.utils.*;

class StartGame extends Packet {

	public final static byte ID = (byte)12;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	// dimension
	public static immutable int OVERWORLD = 0;
	public static immutable int NETHER = 1;
	public static immutable int END = 2;

	// generator
	public static immutable int OLD = 0;
	public static immutable int INFINITE = 1;
	public static immutable int FLAT = 2;

	// world gamemode
	public static immutable int SURVIVAL = 0;
	public static immutable int CREATIVE = 1;

	// difficulty
	public static immutable int PEACEFUL = 0;
	public static immutable int EASY = 1;
	public static immutable int NORMAL = 2;
	public static immutable int HARD = 3;

	// edition
	public static immutable byte CLASSIC = 0;
	public static immutable byte EDUCATION = 1;

	public long entityId;
	public long runtimeId;
	public Tuples.FloatXYZ position;
	public float yaw;
	public float pitch;
	public int seed;
	public int dimension;
	public int generator;
	public int worldGamemode;
	public int difficulty;
	public Tuples.IntXYZ spawnPosition;
	public boolean loadedInCreative;
	public int time;
	public byte edition;
	public float rainLevel;
	public float lightingLevel;
	public boolean cheatsEnabled;
	public boolean textureRequired;
	public String levelId;
	public String worldName;

	@Override
	public int length() {
	}

	@Override
	public byte[] encode() {
		this.buffer = new byte[this.length()];
		this.index = 0;
		this.writeByteB(ID);
		this.writeVarlong(entityId);
		this.writeVarlong(runtimeId);
		this.writeFloatlittle_endian(position.x);this.writeFloatlittle_endian(position.y);this.writeFloatlittle_endian(position.z);
		this.writeFloatlittle_endian(yaw);
		this.writeFloatlittle_endian(pitch);
		this.writeVarint(seed);
		this.writeVarint(dimension);
		this.writeVarint(generator);
		this.writeVarint(worldGamemode);
		this.writeVarint(difficulty);
		this.writeVarint(spawnPosition.x);this.writeVarint(spawnPosition.y);this.writeVarint(spawnPosition.z);
		this.writeBoolB(loadedInCreative);
		this.writeVarint(time);
		this.writeByteB(edition);
		this.writeFloatlittle_endian(rainLevel);
		this.writeFloatlittle_endian(lightingLevel);
		this.writeBoolB(cheatsEnabled);
		this.writeBoolB(textureRequired);
		byte[] bGV2ZWxJZA=levelId.getBytes("UTF-8"); this.writeVaruint((int)bGV2ZWxJZA.length); this.writeBytes(bGV2ZWxJZA);
		byte[] d29ybGROYW1l=worldName.getBytes("UTF-8"); this.writeVaruint((int)d29ybGROYW1l.length); this.writeBytes(d29ybGROYW1l);
		return this.buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this.buffer = buffer;
		this.index = 0;
	}

}
