/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import java.util.UUID;

import sul.protocol.pocket100.types.*;
import sul.utils.*;

class StartGame extends Packet {

	public final static byte ID = (byte)12;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	// dimension
	public final static int OVERWORLD = (int)0;
	public final static int NETHER = (int)1;
	public final static int END = (int)2;

	// generator
	public final static int OLD = (int)0;
	public final static int INFINITE = (int)1;
	public final static int FLAT = (int)2;

	// world gamemode
	public final static int SURVIVAL = (int)0;
	public final static int CREATIVE = (int)1;

	// difficulty
	public final static int PEACEFUL = (int)0;
	public final static int EASY = (int)1;
	public final static int NORMAL = (int)2;
	public final static int HARD = (int)3;

	// edition
	public final static byte CLASSIC = (byte)0;
	public final static byte EDUCATION = (byte)1;

	public long entityId;
	public long runtimeId;
	public Tuples.FloatXYZ position;
	public float yaw;
	public float pitch;
	public int seed;
	public int dimension;
	public int generator;
	public int worldGamemode;
	public int difficulty;
	public Tuples.IntXYZ spawnPosition;
	public boolean loadedInCreative;
	public int time;
	public byte edition;
	public float rainLevel;
	public float lightingLevel;
	public boolean cheatsEnabled;
	public boolean textureRequired;
	public String levelId;
	public String worldName;

	@Override
	public int length() {
		return Var.Long.length(entity_id) + Var.Long.length(runtime_id) + position.length() + Var.Int.length(seed) + Var.Int.length(dimension) + Var.Int.length(generator) + Var.Int.length(world_gamemode) + Var.Int.length(difficulty) + spawn_position.length() + Var.Int.length(time) + level_id.length() + world_name.length() + 20;
	}

	@Override
	public byte[] encode() {
	}

	@Override
	public void decode(byte[] buffer) {
	}

}
