/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.protocol.pocket100.types.*;
import sul.utils.*;

public class ContainerOpen extends Packet {

	public final static byte ID = (byte)48;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	public byte window;
	public byte type;
	public int slotCount;
	public BlockPosition position;
	public long entityId;

	public ContainerOpen() {}

	public ContainerOpen(byte window, byte type, int slotCount, BlockPosition position, long entityId) {
		this.window = window;
		this.type = type;
		this.slotCount = slotCount;
		this.position = position;
		this.entityId = entityId;
	}

	@Override
	public int length() {
		return Var.Int.length(slotCount) + position.length() + Var.Long.length(entityId) + 3;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(window);
		this.writeBigEndianByte(type);
		this.writeVarint(slotCount);
		this.writeBytes(position.encode());
		this.writeVarlong(entityId);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		window=readBigEndianByte();
		type=readBigEndianByte();
		slotCount=varint.decode(_buffer, _index);
		position=new BlockPosition(); position._index=this._index; position.decode(this._buffer); this._index=position._index;
		entityId=varlong.decode(_buffer, _index);
	}

	public static ContainerOpen fromBuffer(byte[] buffer) {
		ContainerOpen ret = new ContainerOpen();
		ret.decode(buffer);
		return ret;
	}

}
