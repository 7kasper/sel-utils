/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import java.util.UUID;

import sul.protocol.pocket100.types.*;
import sul.utils.*;

public class PlayerList extends Packet {

	public final static byte ID = (byte)63;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	public byte action;

	public PlayerList() {}

	public PlayerList(byte action) {
		this.action = action;
	}

	@Override
	public int length() {
		return 2;
	}

	@Override
	public byte[] encode() {
		return this.encodeImpl();
	}

	private byte[] encodeImpl() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(action);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		action=readBigEndianByte();
	}

	private byte[] remainingBuffer() {
		return java.util.Arrays.copyOfRange(this._buffer, this._index, this._buffer.length);
	}

	public static PlayerList fromBuffer(byte[] buffer) {
		PlayerList ret = new PlayerList();
		ret.decode(buffer);
		return ret;
	}

	public class Add extends Packet {

		public final static byte ACTION = (byte)0;

		public PlayerList[] players;

		public Add() {}

		public Add(PlayerList[] players) {
			this.players = players;
		}

		@Override
		public int length() {
			int length=Var.Uint.length(players.length) + 0; for(PlayerList cgxhewvycw:players){ length+=cgxhewvycw.length(); } return length;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeVaruint((int)players.length); for(PlayerList cgxhewvycw:players){ this.writeBytes(cgxhewvycw.encode()); }
			return this._buffer;
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			int bhbsyxllcnm=varuint.decode(_buffer, _index); players=new PlayerList[bhbsyxllcnm]; for(int cgxhewvycw=0;cgxhewvycw<players.length;cgxhewvycw++){ players[cgxhewvycw]=new PlayerList(); players[cgxhewvycw]._index=this._index; players[cgxhewvycw].decode(this._buffer); this._index=players[cgxhewvycw]._index; }
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

	}

	public class Remove extends Packet {

		public final static byte ACTION = (byte)1;

		public UUID[] players;

		public Remove() {}

		public Remove(UUID[] players) {
			this.players = players;
		}

		@Override
		public int length() {
			return Var.Uint.length(players.length) + players.length*16;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeVaruint((int)players.length); for(UUID cgxhewvycw:players){ this.writeBigEndianLong(cgxhewvycw.getLeastSignificantBits()); this.writeBigEndianLong(cgxhewvycw.getMostSignificantBits()); }
			return this._buffer;
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			int bhbsyxllcnm=varuint.decode(_buffer, _index); players=new UUID[bhbsyxllcnm]; for(int cgxhewvycw=0;cgxhewvycw<players.length;cgxhewvycw++){ long bxbsyxllcnnby2d4=readBigEndianLong();long bhbsyxllcnnby2d4=readBigEndianLong();return new UUID(bxbsyxllcnnby2d4,bhbsyxllcnnby2d4); }
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

	}

}
