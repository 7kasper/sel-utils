/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.protocol.pocket100.types.*;
import sul.utils.*;

public class ContainerSetContent extends Packet {

	public final static byte ID = (byte)52;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	public byte window;
	public Slot[] slots;
	public int[] hotbar;

	public ContainerSetContent() {}

	public ContainerSetContent(byte window, Slot[] slots, int[] hotbar) {
		this.window = window;
		this.slots = slots;
		this.hotbar = hotbar;
	}

	@Override
	public int length() {
		int length=Var.Uint.length(slots.length) + Var.Uint.length(hotbar.length) + 2; for(Slot c2xvdhm:slots){ length+=c2xvdhm.length(); };for(int ag90ymfy:hotbar){ length+=Var.Int.length(ag90ymfy); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(window);
		this.writeVaruint((int)slots.length); for(Slot c2xvdhm:slots){ this.writeBytes(c2xvdhm.encode()); }
		this.writeVaruint((int)hotbar.length); for(int ag90ymfy:hotbar){ this.writeVarint(ag90ymfy); }
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		window=readBigEndianByte();
		int bhnsb3rz=varuint.decode(_buffer, _index); slots=new Slot[bhnsb3rz]; for(int c2xvdhm=0;c2xvdhm<slots.length;c2xvdhm++){ slots[c2xvdhm]=new Slot(); slots[c2xvdhm]._index=this._index; slots[c2xvdhm].decode(this._buffer); this._index=slots[c2xvdhm]._index; }
		int bghvdgjhcg=varuint.decode(_buffer, _index); hotbar=new int[bghvdgjhcg]; for(int ag90ymfy=0;ag90ymfy<hotbar.length;ag90ymfy++){ hotbar[ag90ymfy]=varint.decode(_buffer, _index); }
	}

	public static ContainerSetContent fromBuffer(byte[] buffer) {
		ContainerSetContent ret = new ContainerSetContent();
		ret.decode(buffer);
		return ret;
	}

}
