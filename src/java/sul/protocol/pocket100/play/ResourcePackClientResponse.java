/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 * 
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.utils.*;

public class ResourcePackClientResponse extends Packet {

	public static final byte ID = (byte)9;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	// status
	public static final byte REFUSED = 1;
	public static final byte SEND_PACKS = 2;
	public static final byte HAVE_ALL_PACKS = 3;
	public static final byte COMPLETED = 4;

	public byte status;
	public sul.protocol.pocket100.types.Packs packIds;

	public ResourcePackClientResponse() {}

	public ResourcePackClientResponse(byte status, sul.protocol.pocket100.types.Packs packIds) {
		this.status = status;
		this.packIds = packIds;
	}

	@Override
	public int length() {
		return packIds.length() + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(status);
		this.writeBytes(packIds.encode());
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		status=readBigEndianByte();
		packIds=new sul.protocol.pocket100.types.Packs(); packIds._index=this._index; packIds.decode(this._buffer); this._index=packIds._index;
	}

	public static ResourcePackClientResponse fromBuffer(byte[] buffer) {
		ResourcePackClientResponse ret = new ResourcePackClientResponse();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "ResourcePackClientResponse(status: " + this.status + ", packIds: " + this.packIds.toString() + ")";
	}

}
