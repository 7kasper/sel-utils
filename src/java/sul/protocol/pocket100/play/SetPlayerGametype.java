/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket100.xml
 */
package sul.protocol.pocket100.play;

import sul.utils.*;

public class SetPlayerGametype extends Packet {

	public final static byte ID = (byte)62;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = true;

	// gametype
	public final static int SURVIVAL = 0;
	public final static int CREATIVE = 1;

	public int gametype;

	public SetPlayerGametype() {}

	public SetPlayerGametype(int gametype) {
		this.gametype = gametype;
	}

	@Override
	public int length() {
		return Buffer.varintLength(gametype) + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVarint(gametype);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		gametype=this.readVarint();
	}

	public static SetPlayerGametype fromBuffer(byte[] buffer) {
		SetPlayerGametype ret = new SetPlayerGametype();
		ret.decode(buffer);
		return ret;
	}

}
