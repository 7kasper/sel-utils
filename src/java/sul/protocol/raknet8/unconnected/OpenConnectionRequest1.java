/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.unconnected;

import sul.utils.*;

public class OpenConnectionRequest1 extends Packet {

	public final static byte ID = (byte)5;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	public byte[] magic = new byte[16];
	public byte protocol;
	public byte[] mtu;

	public OpenConnectionRequest1() {}

	public OpenConnectionRequest1(byte[] magic, byte protocol, byte[] mtu) {
		this.magic = magic;
		this.protocol = protocol;
		this.mtu = mtu;
	}

	@Override
	public int length() {
		return magic.length + mtu.length + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBytes(magic);
		this.writeBigEndianByte(protocol);
		this.writeBytes(mtu);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		final int bg1hz2lj=16; magic=new byte[bg1hz2lj]; magic=this.readBytes(bg1hz2lj);
		protocol=readBigEndianByte();
		mtu=this.readBytes(this._buffer.length-this._index);
	}

	public static OpenConnectionRequest1 fromBuffer(byte[] buffer) {
		OpenConnectionRequest1 ret = new OpenConnectionRequest1();
		ret.decode(buffer);
		return ret;
	}

}
