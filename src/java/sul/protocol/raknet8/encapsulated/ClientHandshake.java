/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.encapsulated;

import java.util.UUID;

import sul.protocol.raknet8.types.*;
import sul.utils.*;

class ClientHandshake extends Packet {

	public final static byte ID = (byte)19;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	public Address clientAddress;
	public Address[10] systemAddresses;
	public long pingId;
	public long clientId;

	@Override
	public int length() {
	}

	@Override
	public byte[] encode() {
		this.buffer = new byte[this.length()];
		this.index = 0;
		this.writeByteB(ID);
		this.writeBytes(clientAddress.encode());
		for(address c3lzdGVtQWRkcmVz:systemAddresses){ this.writeBytes(c3lzdGVtQWRkcmVz.encode()); }
		this.writeLongB(pingId);
		this.writeLongB(clientId);
		return this.buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this.buffer = buffer;
		this.index = 0;
	}

}
