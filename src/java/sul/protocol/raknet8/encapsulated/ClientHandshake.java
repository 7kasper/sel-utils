/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.encapsulated;

import java.util.Arrays;

import sul.utils.*;

public class ClientHandshake extends Packet {

	public static final byte ID = (byte)19;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	@Override
	public int getId() {
		return ID;
	}

	public sul.protocol.raknet8.types.Address clientAddress;
	public sul.protocol.raknet8.types.Address[] systemAddresses = new sul.protocol.raknet8.types.Address[10];
	public long pingId;
	public long clientId;

	public ClientHandshake() {}

	public ClientHandshake(sul.protocol.raknet8.types.Address clientAddress, sul.protocol.raknet8.types.Address[] systemAddresses, long pingId, long clientId) {
		this.clientAddress = clientAddress;
		this.systemAddresses = systemAddresses;
		this.pingId = pingId;
		this.clientId = clientId;
	}

	@Override
	public int length() {
		int length=clientAddress.length() + 17; for(sul.protocol.raknet8.types.Address c3lzdgvtqwrkcmvz:systemAddresses){ length+=c3lzdgvtqwrkcmvz.length(); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBytes(clientAddress.encode());
		for(sul.protocol.raknet8.types.Address c3lzdgvtqwrkcmvz:systemAddresses){ this.writeBytes(c3lzdgvtqwrkcmvz.encode()); }
		this.writeBigEndianLong(pingId);
		this.writeBigEndianLong(clientId);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		clientAddress=new sul.protocol.raknet8.types.Address(); clientAddress._index=this._index; clientAddress.decode(this._buffer); this._index=clientAddress._index;
		final int bhn5c3rlbufkzhjl=10; systemAddresses=new sul.protocol.raknet8.types.Address[bhn5c3rlbufkzhjl]; for(int c3lzdgvtqwrkcmvz=0;c3lzdgvtqwrkcmvz<systemAddresses.length;c3lzdgvtqwrkcmvz++){ systemAddresses[c3lzdgvtqwrkcmvz]=new sul.protocol.raknet8.types.Address(); systemAddresses[c3lzdgvtqwrkcmvz]._index=this._index; systemAddresses[c3lzdgvtqwrkcmvz].decode(this._buffer); this._index=systemAddresses[c3lzdgvtqwrkcmvz]._index; }
		pingId=readBigEndianLong();
		clientId=readBigEndianLong();
	}

	public static ClientHandshake fromBuffer(byte[] buffer) {
		ClientHandshake ret = new ClientHandshake();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "ClientHandshake(clientAddress: " + this.clientAddress.toString() + ", systemAddresses: " + Arrays.deepToString(this.systemAddresses) + ", pingId: " + this.pingId + ", clientId: " + this.clientId + ")";
	}

}
