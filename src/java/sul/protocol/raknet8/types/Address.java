/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.types;

import sul.utils.*;

public class Address extends Packet {

	public byte type;
	public byte[] ipv4 = new byte[4];
	public byte[] ipv6 = new byte[16];
	public short port;

	public Address() {}

	public Address(byte type, byte[] ipv4, byte[] ipv6, short port) {
		this.type = type;
		this.ipv4 = ipv4;
		this.ipv6 = ipv6;
		this.port = port;
	}

	@Override
	public int length() {
		return ipv4.length + ipv6.length + 3;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(type);
		if(type==4){ this.writeBytes(ipv4); }
		if(type==6){ this.writeBytes(ipv6); }
		this.writeBigEndianShort(port);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		type=readBigEndianByte();
		if(type==4){ final int bglwdjq=4; ipv4=this.readBytes(bglwdjq); }
		if(type==6){ final int bglwdjy=16; ipv6=this.readBytes(bglwdjy); }
		port=readBigEndianShort();
	}


}
