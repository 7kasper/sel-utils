/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
package sul.protocol.raknet8.control;

import sul.utils.*;

public class Nack extends Packet {

	public static final byte ID = (byte)160;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	public sul.protocol.raknet8.types.Acknowledge[] packets;

	public Nack() {}

	public Nack(sul.protocol.raknet8.types.Acknowledge[] packets) {
		this.packets = packets;
	}

	@Override
	public int length() {
		int length=3; for(sul.protocol.raknet8.types.Acknowledge cgfja2v0cw:packets){ length+=cgfja2v0cw.length(); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianShort((short)packets.length); for(sul.protocol.raknet8.types.Acknowledge cgfja2v0cw:packets){ this.writeBytes(cgfja2v0cw.encode()); }
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		int bhbhy2tldhm=readBigEndianShort(); packets=new sul.protocol.raknet8.types.Acknowledge[bhbhy2tldhm]; for(int cgfja2v0cw=0;cgfja2v0cw<packets.length;cgfja2v0cw++){ packets[cgfja2v0cw]=new sul.protocol.raknet8.types.Acknowledge(); packets[cgfja2v0cw]._index=this._index; packets[cgfja2v0cw].decode(this._buffer); this._index=packets[cgfja2v0cw]._index; }
	}

	public static Nack fromBuffer(byte[] buffer) {
		Nack ret = new Nack();
		ret.decode(buffer);
		return ret;
	}

}
