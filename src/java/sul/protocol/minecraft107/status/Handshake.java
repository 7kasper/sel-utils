/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft107.xml
 */
package sul.protocol.minecraft107.status;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

public class Handshake extends Packet {

	public final static int ID = (int)0;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	// next
	public final static int STATUS = 1;
	public final static int LOGIN = 2;

	public int protocol;
	public String serverAddress;
	public short serverPort;
	public int next;

	public Handshake() {}

	public Handshake(int protocol, String serverAddress, short serverPort, int next) {
		this.protocol = protocol;
		this.serverAddress = serverAddress;
		this.serverPort = serverPort;
		this.next = next;
	}

	@Override
	public int length() {
		return Var.Uint.length() + Var.Uint.length(protocol) + Var.Uint.length(serverAddress.getBytes(StandardCharsets.UTF_8).length) + serverAddress.getBytes(StandardCharsets.UTF_8).length + Var.Uint.length(next) + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(protocol);
		byte[] c2vydmvyqwrkcmvz=serverAddress.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)c2vydmvyqwrkcmvz.length); this.writeBytes(c2vydmvyqwrkcmvz);
		this.writeBigEndianShort(serverPort);
		this.writeVaruint(next);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		varuint.decode(_buffer, _index);
		protocol=varuint.decode(_buffer, _index);
		int bgvuc2vydmvyqwrk=varuint.decode(_buffer, _index); serverAddress=new String(this.readBytes(bgvuc2vydmvyqwrk), StandardCharsets.UTF_8);
		serverPort=readBigEndianShort();
		next=varuint.decode(_buffer, _index);
	}

	public static Handshake fromBuffer(byte[] buffer) {
		Handshake ret = new Handshake();
		ret.decode(buffer);
		return ret;
	}

}
