/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
package sul.protocol.externalconsole1.status;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

/**
 * Updates the list of the nodes connected to the hub, adding or removing one.
 * If the server isn't built on the hub-node layout this packet is never sent.
 */
public class UpdateNodes extends Packet {

	public static final byte ID = (byte)1;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	// action
	public static final byte ADD = 0;
	public static final byte REMOVE = 1;

	/**
	 * Whether the node should be added or removed from the list of connected nodes.
	 */
	public byte action;

	/**
	 * Name of the node.
	 */
	public String node;

	public UpdateNodes() {}

	public UpdateNodes(byte action, String node) {
		this.action = action;
		this.node = node;
	}

	@Override
	public int length() {
		return node.getBytes(StandardCharsets.UTF_8).length + 4;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(action);
		byte[] bm9kzq=node.getBytes(StandardCharsets.UTF_8); this.writeBigEndianShort((short)bm9kzq.length); this.writeBytes(bm9kzq);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		action=readBigEndianByte();
		short bgvubm9kzq=readBigEndianShort(); node=new String(this.readBytes(bgvubm9kzq), StandardCharsets.UTF_8);
	}

	public static UpdateNodes fromBuffer(byte[] buffer) {
		UpdateNodes ret = new UpdateNodes();
		ret.decode(buffer);
		return ret;
	}

}
