/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
package sul.protocol.externalconsole1.login;

import java.util.UUID;

import sul.protocol.externalconsole1.types.*;
import sul.utils.*;

/**
 * Performs authentication following the directives given by the AuthCredentials packet.
 */
class Auth extends Packet {

	public final static byte ID = (byte)1;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	/**
	 * Pasword encoded as UTF-8 if AuthCredentials.hash is `false` or the hash (specified
	 * in AuthCredentials.hashAlgorithm) of the password encoded as UTF-8 and the bytes
	 * from AuthCredentials.payload if `true`.
	 * The hash can be done with a function (if hashAlgorithm is `sha1`) in D:
	 * ```d
	 * sha1Of(cast(ubyte[])authCredentials.payload ~ password);
	 * ```
	 * Or using `MessageDigest` in Java:
	 * ```java
	 * MessageDigest md = MessageDigest.getInstance(authCredentials.hashAlgorithm);
	 * md.update(password.getBytes(StandardCharsets.UTF_8));
	 * md.update(authCredentials.payload);
	 * byte[] hash = md.digest();
	 * ```
	 */
	public byte[] hash;

	@Override
	public int length() {
	}

	@Override
	public byte[] encode() {
		this.buffer = new byte[this.length()];
		this.index = 0;
		this.writeByteB(ID);
		this.writeShortB((short)hash.length); for(ubyte agfzaa:hash){ this.writeByteB(agfzaa); }
		return this.buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this.buffer = buffer;
		this.index = 0;
	}

}
