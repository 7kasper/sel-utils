/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/externalconsole1.xml
 */
package sul.protocol.externalconsole1.connected;

import java.util.UUID;

import sul.protocol.externalconsole1.types.*;
import sul.utils.*;

/**
 * Logs a message from the server's console. It may be the output of a command, a debug
 * message or any other message that the server retains able to be seen by the External
 * Console.
 */
class ConsoleMessage extends Packet {

	public final static byte ID = (byte)3;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	/**
	 * Name of the node that created the log or an empty string if the log was created
	 * by the hub or by a server implementation that isn't based on the hub-node structure.
	 */
	public String node;

	/**
	 * Unix timestamp in milliseconds that indicates the exact time when the log has been
	 * generated by the server.
	 * The logs may not arrive in order when the server uses the hub-node structure or
	 * another kind of proxy because the logs created by the nodes have to travel a longer
	 * distance, which requires more time.
	 */
	public long timestamp;

	/**
	 * Name of the logger. It may be the world name if the log has been generated by a
	 * world's message (like a broadcast or a chat message), the name of plugin (for example
	 * `plugin\test`) or the name of the package/module/class that has generated the log
	 * (like `math.vector` or `event.world.player`).
	 */
	public String logger;

	/**
	 * The logged message. It may contain Minecraft's formatting codes which should be
	 * translated into appropriate colours and formatting by the client implementation
	 * of the console.
	 */
	public String message;

	@Override
	public int length() {
	}

	@Override
	public byte[] encode() {
		this.buffer = new byte[this.length()];
		this.index = 0;
		this.writeByteB(ID);
		byte[] bm9kzq=node.getBytes("UTF-8"); this.writeShortB((short)bm9kzq.length); this.writeBytes(bm9kzq);
		this.writeLongB(timestamp);
		byte[] bg9nz2vy=logger.getBytes("UTF-8"); this.writeShortB((short)bg9nz2vy.length); this.writeBytes(bg9nz2vy);
		byte[] bwvzc2fnzq=message.getBytes("UTF-8"); this.writeShortB((short)bwvzc2fnzq.length); this.writeBytes(bwvzc2fnzq);
		return this.buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this.buffer = buffer;
		this.index = 0;
	}

}
