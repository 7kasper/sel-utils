/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft109.xml
 */
package sul.protocol.minecraft109.serverbound;

import sul.utils.*;

public class PlayerAbilities extends Packet {

	public final static int ID = (int)18;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	// flags
	public final static byte CREATIVE_MODE = 1;
	public final static byte FLYING = 2;
	public final static byte ALLOW_FLYING = 4;
	public final static byte INVINCIBLE = 8;

	public byte flags;
	public float flyingSpeed;
	public float walkingSpeed;

	public PlayerAbilities() {}

	public PlayerAbilities(byte flags, float flyingSpeed, float walkingSpeed) {
		this.flags = flags;
		this.flyingSpeed = flyingSpeed;
		this.walkingSpeed = walkingSpeed;
	}

	@Override
	public int length() {
		return Var.Uint.length() + 9;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeBigEndianByte(flags);
		this.writeBigEndianFloat(flyingSpeed);
		this.writeBigEndianFloat(walkingSpeed);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		varuint.decode(_buffer, _index);
		flags=readBigEndianByte();
		flyingSpeed=readBigEndianFloat();
		walkingSpeed=readBigEndianFloat();
	}

	public static PlayerAbilities fromBuffer(byte[] buffer) {
		PlayerAbilities ret = new PlayerAbilities();
		ret.decode(buffer);
		return ret;
	}

}
