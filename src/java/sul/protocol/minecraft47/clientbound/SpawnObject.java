/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft47.xml
 */
package sul.protocol.minecraft47.clientbound;

import sul.utils.*;

public class SpawnObject extends Packet {

	public static final int ID = (int)14;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	public int entityId;
	public byte type;
	public Tuples.IntXYZ position;
	public byte pitch;
	public byte yaw;
	public int data;
	public Tuples.ShortXYZ velocity;

	public SpawnObject() {}

	public SpawnObject(int entityId, byte type, Tuples.IntXYZ position, byte pitch, byte yaw, int data, Tuples.ShortXYZ velocity) {
		this.entityId = entityId;
		this.type = type;
		this.position = position;
		this.pitch = pitch;
		this.yaw = yaw;
		this.data = data;
		this.velocity = velocity;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(ID) + Buffer.varuintLength(entityId) + 25;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeVaruint(ID);
		this.writeVaruint(entityId);
		this.writeBigEndianByte(type);
		this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.y); this.writeBigEndianInt(position.z);
		this.writeBigEndianByte(pitch);
		this.writeBigEndianByte(yaw);
		this.writeBigEndianInt(data);
		this.writeBigEndianShort(velocity.x); this.writeBigEndianShort(velocity.y); this.writeBigEndianShort(velocity.z);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		this.readVaruint();
		entityId=this.readVaruint();
		type=readBigEndianByte();
		position.x=readBigEndianInt(); position.y=readBigEndianInt(); position.z=readBigEndianInt();
		pitch=readBigEndianByte();
		yaw=readBigEndianByte();
		data=readBigEndianInt();
		velocity.x=readBigEndianShort(); velocity.y=readBigEndianShort(); velocity.z=readBigEndianShort();
	}

	public static SpawnObject fromBuffer(byte[] buffer) {
		SpawnObject ret = new SpawnObject();
		ret.decode(buffer);
		return ret;
	}

}
