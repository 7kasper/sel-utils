/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.generic;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

/**
 * Executes a command on the node.
 */
public class RemoteCommand extends Packet {

	public static final byte ID = (byte)8;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	// origin
	public static final byte HUB = 0;
	public static final byte EXTERNAL_CONSOLE = 1;
	public static final byte RCON = 2;

	public byte origin;
	public sul.protocol.hncom1.types.Address sender;
	public String command;

	public RemoteCommand() {}

	public RemoteCommand(byte origin, sul.protocol.hncom1.types.Address sender, String command) {
		this.origin = origin;
		this.sender = sender;
		this.command = command;
	}

	@Override
	public int length() {
		return sender.length() + Buffer.varuintLength(command.getBytes(StandardCharsets.UTF_8).length) + command.getBytes(StandardCharsets.UTF_8).length + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(origin);
		this.writeBytes(sender.encode());
		byte[] y29tbwfuza=command.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)y29tbwfuza.length); this.writeBytes(y29tbwfuza);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		origin=readBigEndianByte();
		sender=new sul.protocol.hncom1.types.Address(); sender._index=this._index; sender.decode(this._buffer); this._index=sender._index;
		int bgvuy29tbwfuza=this.readVaruint(); command=new String(this.readBytes(bgvuy29tbwfuza), StandardCharsets.UTF_8);
	}

	public static RemoteCommand fromBuffer(byte[] buffer) {
		RemoteCommand ret = new RemoteCommand();
		ret.decode(buffer);
		return ret;
	}

}
