/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.generic;

import sul.protocol.hncom1.types.*;
import sul.utils.*;

/**
 * Sends node logs to the hub.
 */
public class Logs extends Packet {

	public final static byte ID = (byte)7;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	public Log[] messages;

	public Logs() {}

	public Logs(Log[] messages) {
		this.messages = messages;
	}

	@Override
	public int length() {
		int length=Var.Uint.length(messages.length) + 1; for(Log bwvzc2fnzxm:messages){ length+=bwvzc2fnzxm.length(); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint((int)messages.length); for(Log bwvzc2fnzxm:messages){ this.writeBytes(bwvzc2fnzxm.encode()); }
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		int bg1lc3nhz2vz=varuint.decode(_buffer, _index); messages=new Log[bg1lc3nhz2vz]; for(int bwvzc2fnzxm=0;bwvzc2fnzxm<messages.length;bwvzc2fnzxm++){ messages[bwvzc2fnzxm]=new Log(); messages[bwvzc2fnzxm]._index=this._index; messages[bwvzc2fnzxm].decode(this._buffer); this._index=messages[bwvzc2fnzxm]._index; }
	}

	public static Logs fromBuffer(byte[] buffer) {
		Logs ret = new Logs();
		ret.decode(buffer);
		return ret;
	}

}
