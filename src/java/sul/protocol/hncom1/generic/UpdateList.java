/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.generic;

import java.nio.charset.StandardCharsets;
import java.util.UUID;

import sul.utils.*;

/**
 * Updates a list.
 */
public class UpdateList extends Packet {

	public final static byte ID = (byte)9;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	// list
	public final static byte WHITELIST = 0;
	public final static byte BLACKLIST = 1;

	// action
	public final static byte ADD = 0;
	public final static byte REMOVE = 1;

	public byte list;
	public byte action;
	public byte type;

	public UpdateList() {}

	public UpdateList(byte list, byte action, byte type) {
		this.list = list;
		this.action = action;
		this.type = type;
	}

	@Override
	public int length() {
		return 4;
	}

	@Override
	public byte[] encode() {
		return this.encodeImpl();
	}

	private byte[] encodeImpl() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeBigEndianByte(list);
		this.writeBigEndianByte(action);
		this.writeBigEndianByte(type);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		list=readBigEndianByte();
		action=readBigEndianByte();
		type=readBigEndianByte();
	}

	private byte[] remainingBuffer() {
		return java.util.Arrays.copyOfRange(this._buffer, this._index, this._buffer.length);
	}

	public static UpdateList fromBuffer(byte[] buffer) {
		UpdateList ret = new UpdateList();
		ret.decode(buffer);
		return ret;
	}

	public class ByHubId extends Packet {

		public final static byte TYPE = (byte)0;

		public int hubId;

		public ByHubId() {}

		public ByHubId(int hubId) {
			this.hubId = hubId;
		}

		@Override
		public int length() {
			return Var.Uint.length(hubId);
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeVaruint(hubId);
			return this._buffer;
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			hubId=varuint.decode(_buffer, _index);
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

	}

	public class ByName extends Packet {

		public final static byte TYPE = (byte)1;

		public String username;

		public ByName() {}

		public ByName(String username) {
			this.username = username;
		}

		@Override
		public int length() {
			return Var.Uint.length(username.getBytes(StandardCharsets.UTF_8).length) + username.getBytes(StandardCharsets.UTF_8).length;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			byte[] dxnlcm5hbwu=username.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)dxnlcm5hbwu.length); this.writeBytes(dxnlcm5hbwu);
			return this._buffer;
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			int bgvudxnlcm5hbwu=varuint.decode(_buffer, _index); username=new String(this.readBytes(bgvudxnlcm5hbwu), StandardCharsets.UTF_8);
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

	}

	public class ByUuid extends Packet {

		public final static byte TYPE = (byte)2;

		// game
		public final static byte POCKET = 1;
		public final static byte MINECRAFT = 2;

		public byte game;
		public UUID uuid;

		public ByUuid() {}

		public ByUuid(byte game, UUID uuid) {
			this.game = game;
			this.uuid = uuid;
		}

		@Override
		public int length() {
			return 17;
		}

		@Override
		public byte[] encode() {
			byte[] _encode = encodeImpl();
			this._buffer = new byte[_encode.length + this.length()];
			this.writeBytes(_encode);
			this.writeBigEndianByte(game);
			this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
			return this._buffer;
		}

		@Override
		public void decode(byte[] buffer) {
			this._buffer = buffer;
			game=readBigEndianByte();
			long bxv1awq=readBigEndianLong();long bhv1awq=readBigEndianLong();return new UUID(bxv1awq,bhv1awq);
		}

		public void decode() {
			this.decode(remainingBuffer());
		}

	}

}
