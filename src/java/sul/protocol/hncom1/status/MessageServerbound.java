/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.status;

import sul.utils.*;

public class MessageServerbound extends Packet {

	public static final byte ID = (byte)7;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	/**
	 * Addressees of the message. If the array is empty the message should be broadcasted
	 * to every connected node.
	 */
	public int[] addressees;
	public byte[] payload;

	public MessageServerbound() {}

	public MessageServerbound(int[] addressees, byte[] payload) {
		this.addressees = addressees;
		this.payload = payload;
	}

	@Override
	public int length() {
		int length=Buffer.varuintLength(addressees.length) + Buffer.varuintLength(payload.length) + payload.length + 1; for(int ywrkcmvzc2vlcw:addressees){ length+=Buffer.varuintLength(ywrkcmvzc2vlcw); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint((int)addressees.length); for(int ywrkcmvzc2vlcw:addressees){ this.writeVaruint(ywrkcmvzc2vlcw); }
		this.writeVaruint((int)payload.length); this.writeBytes(payload);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		int bgfkzhjlc3nlzxm=this.readVaruint(); addressees=new int[bgfkzhjlc3nlzxm]; for(int ywrkcmvzc2vlcw=0;ywrkcmvzc2vlcw<addressees.length;ywrkcmvzc2vlcw++){ addressees[ywrkcmvzc2vlcw]=this.readVaruint(); }
		int bhbhewxvywq=this.readVaruint(); payload=this.readBytes(bhbhewxvywq);
	}

	public static MessageServerbound fromBuffer(byte[] buffer) {
		MessageServerbound ret = new MessageServerbound();
		ret.decode(buffer);
		return ret;
	}

}
