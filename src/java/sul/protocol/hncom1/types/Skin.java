/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.types;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

/**
 * Player's skin to be sent to Minecraft: Pocket Edition clients.
 * If the server only allows Minecraft player to connect the following fields should
 * be empty.
 */
public class Skin extends Packet {

	/**
	 * Name of the skin.
	 */
	public String name;

	/**
	 * RGBA map of the skin colours. Length should be, if the skin is not empty, 8192 or
	 * 16384.
	 */
	public byte[] data;

	public Skin() {}

	public Skin(String name, byte[] data) {
		this.name = name;
		this.data = data;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(name.getBytes(StandardCharsets.UTF_8).length) + name.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(data.length) + data.length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		byte[] bmftzq=name.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bmftzq.length); this.writeBytes(bmftzq);
		this.writeVaruint((int)data.length); this.writeBytes(data);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		int bgvubmftzq=this.readVaruint(); name=new String(this.readBytes(bgvubmftzq), StandardCharsets.UTF_8);
		int bgrhdge=this.readVaruint(); data=this.readBytes(bgrhdge);
	}


}
