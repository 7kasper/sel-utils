/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.types;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

/**
 * Indicates a game and informations about it.
 */
public class Game extends Packet {

	// type
	public final static byte POCKET = 1;
	public final static byte MINECRAFT = 2;

	/**
	 * Type of the game.
	 */
	public byte type;

	/**
	 * Protocols accepted by the server for the game. They should be ordered from oldest
	 * to newest.
	 */
	public int[] protocols;

	/**
	 * "Message of the day" which is displayed in the game's server list. It may contain
	 * Minecraft formatting codes.
	 */
	public String motd;

	/**
	 * Port, or main port if the server allows the connection from multiple ports, where
	 * the socket is listening for connections.
	 */
	public short port;

	public Game() {}

	public Game(byte type, int[] protocols, String motd, short port) {
		this.type = type;
		this.protocols = protocols;
		this.motd = motd;
		this.port = port;
	}

	@Override
	public int length() {
		int length=Var.Uint.length(protocols.length) + Var.Uint.length(motd.getBytes(StandardCharsets.UTF_8).length) + motd.getBytes(StandardCharsets.UTF_8).length + 3; for(int chjvdg9jb2xz:protocols){ length+=Var.Uint.length(chjvdg9jb2xz); } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(type);
		this.writeVaruint((int)protocols.length); for(int chjvdg9jb2xz:protocols){ this.writeVaruint(chjvdg9jb2xz); }
		byte[] bw90za=motd.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bw90za.length); this.writeBytes(bw90za);
		this.writeBigEndianShort(port);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		type=readBigEndianByte();
		int bhbyb3rvy29scw=varuint.decode(_buffer, _index); protocols=new int[bhbyb3rvy29scw]; for(int chjvdg9jb2xz=0;chjvdg9jb2xz<protocols.length;chjvdg9jb2xz++){ protocols[chjvdg9jb2xz]=varuint.decode(_buffer, _index); }
		int bgvubw90za=varuint.decode(_buffer, _index); motd=new String(this.readBytes(bgvubw90za), StandardCharsets.UTF_8);
		port=readBigEndianShort();
	}


}
