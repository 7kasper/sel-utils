/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.player;

import java.nio.charset.StandardCharsets;

import sul.utils.*;

public class UpdateWorld extends Packet {

	public static final byte ID = (byte)17;

	public static final boolean CLIENTBOUND = false;
	public static final boolean SERVERBOUND = true;

	public int hubId;
	public String name;
	public byte dimension;

	public UpdateWorld() {}

	public UpdateWorld(int hubId, String name, byte dimension) {
		this.hubId = hubId;
		this.name = name;
		this.dimension = dimension;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(hubId) + Buffer.varuintLength(name.getBytes(StandardCharsets.UTF_8).length) + name.getBytes(StandardCharsets.UTF_8).length + 2;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(hubId);
		byte[] bmftzq=name.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bmftzq.length); this.writeBytes(bmftzq);
		this.writeBigEndianByte(dimension);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		hubId=this.readVaruint();
		int bgvubmftzq=this.readVaruint(); name=new String(this.readBytes(bgvubmftzq), StandardCharsets.UTF_8);
		dimension=readBigEndianByte();
	}

	public static UpdateWorld fromBuffer(byte[] buffer) {
		UpdateWorld ret = new UpdateWorld();
		ret.decode(buffer);
		return ret;
	}

}
