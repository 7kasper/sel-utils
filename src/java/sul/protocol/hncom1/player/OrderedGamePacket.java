/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.player;

import sul.utils.*;

/**
 * Sends data to the client but order it because it could be sent by the node unordered,
 * due to compressed packet sent delayed.
 */
public class OrderedGamePacket extends Packet {

	public final static byte ID = (byte)20;

	public final static boolean CLIENTBOUND = false;
	public final static boolean SERVERBOUND = true;

	public int hubId;
	public int order;
	public byte[] packet;

	public OrderedGamePacket() {}

	public OrderedGamePacket(int hubId, int order, byte[] packet) {
		this.hubId = hubId;
		this.order = order;
		this.packet = packet;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(hubId) + Buffer.varuintLength(order) + packet.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(hubId);
		this.writeVaruint(order);
		this.writeBytes(packet);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		hubId=this.readVaruint();
		order=this.readVaruint();
		packet=this.readBytes(this._buffer.length-this._index);
	}

	public static OrderedGamePacket fromBuffer(byte[] buffer) {
		OrderedGamePacket ret = new OrderedGamePacket();
		ret.decode(buffer);
		return ret;
	}

}
