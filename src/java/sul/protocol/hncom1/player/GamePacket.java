/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.player;

import sul.utils.*;

/**
 * Sends data to client or handles data received from the client.
 */
public class GamePacket extends Packet {

	public static final byte ID = (byte)19;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = true;

	public int hubId;
	public byte[] packet;

	public GamePacket() {}

	public GamePacket(int hubId, byte[] packet) {
		this.hubId = hubId;
		this.packet = packet;
	}

	@Override
	public int length() {
		return Buffer.varuintLength(hubId) + packet.length + 1;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVaruint(hubId);
		this.writeBytes(packet);
		return this._buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		hubId=this.readVaruint();
		packet=this.readBytes(this._buffer.length-this._index);
	}

	public static GamePacket fromBuffer(byte[] buffer) {
		GamePacket ret = new GamePacket();
		ret.decode(buffer);
		return ret;
	}

}
