/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.login;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import sul.utils.*;

/**
 * Informations about the hub.
 */
public class HubInfo extends Packet {

	public static final byte ID = (byte)3;

	public static final boolean CLIENTBOUND = true;
	public static final boolean SERVERBOUND = false;

	@Override
	public int getId() {
		return ID;
	}

	// max
	public static final int UNLIMITED = -1;

	/**
	 * Unix time in microseconds precision that indicates the exact moment when this packet
	 * was created. It's used by the node to calculate the latency.
	 */
	public long time;

	/**
	 * Server's id, either given by a snoop system or randomly generated at runtime.
	 */
	public long serverId;

	/**
	 * First number of the 4,294,967,296 (2³²) reserved by the hub to create the node's
	 * UUIDs. Every UUID generated by the node is formed by the server's id (most signicant)
	 * and the next reserved uuid (least significant). This way every UUID in the hub and
	 * in the connected nodes is always different.
	 */
	public long reservedUuids;

	/**
	 * Unformatted name of the server as indicated in the hub's configuration file.
	 */
	public String displayName;

	/**
	 * Indicates whether the player are authenticated using the games' official authentication
	 * services and their identity should be trusted.
	 */
	public boolean onlineMode;

	/**
	 * Informations about the games supported by the hub.
	 */
	public sul.protocol.hncom1.types.GameInfo[] gamesInfo;

	/**
	 * Number of players currently online and connected to other nodes.
	 */
	public int online;

	/**
	 * Number of maximum players that can connect to the server. The number may change
	 * after this node connects.
	 */
	public int max;

	/**
	 * Default server's language in format (language_COUNTRY, e.g. en_GB) and also the
	 * default language for players that don't specify their language or for the ones which
	 * language is not supported by the server.
	 */
	public String language;

	/**
	 * Languages accepted by the server in the same format as language. The list should
	 * always contain at least one element (the default language).
	 */
	public String[] acceptedLanguages;

	/**
	 * Optional informations about the server's website and social accounts in the format
	 * indicated below.
	 * <code>
	 * {
	 *    "website": "example.com",
	 *    "facebook": "example-official",
	 *    "twitter": "example_tweets",
	 *    "youtube": "examplechannel",
	 *    "instagram": "example",
	 *    "google_plus": "example-plus"
	 * }
	 * </code>
	 */
	public String socialJson;

	/**
	 * Optional informations about the server's software, system and options in the format
	 * indicated below.
	 * <code>
	 * {
	 *    "software": {
	 *       "name": "SEL",
	 *       "version": "1.0.4",
	 *       "stable": true
	 *    },
	 *    "minecraft": {
	 *       "edu": false,
	 *       "realm": true
	 *    },
	 *    "system": {
	 *       "os": "Ubuntu 16.04",
	 *       "cpu": "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz",
	 *       "cores": 2,
	 *       "ram": 2147483648
	 *    }
	 * }
	 * </code>
	 */
	public String additionalJson;

	public HubInfo() {}

	public HubInfo(long time, long serverId, long reservedUuids, String displayName, boolean onlineMode, sul.protocol.hncom1.types.GameInfo[] gamesInfo, int online, int max, String language, String[] acceptedLanguages, String socialJson, String additionalJson) {
		this.time = time;
		this.serverId = serverId;
		this.reservedUuids = reservedUuids;
		this.displayName = displayName;
		this.onlineMode = onlineMode;
		this.gamesInfo = gamesInfo;
		this.online = online;
		this.max = max;
		this.language = language;
		this.acceptedLanguages = acceptedLanguages;
		this.socialJson = socialJson;
		this.additionalJson = additionalJson;
	}

	@Override
	public int length() {
		int length=Buffer.varulongLength(time) + Buffer.varulongLength(serverId) + Buffer.varulongLength(reservedUuids) + Buffer.varuintLength(displayName.getBytes(StandardCharsets.UTF_8).length) + displayName.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(gamesInfo.length) + Buffer.varuintLength(online) + Buffer.varintLength(max) + Buffer.varuintLength(language.getBytes(StandardCharsets.UTF_8).length) + language.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(acceptedLanguages.length) + Buffer.varuintLength(socialJson.getBytes(StandardCharsets.UTF_8).length) + socialJson.getBytes(StandardCharsets.UTF_8).length + Buffer.varuintLength(additionalJson.getBytes(StandardCharsets.UTF_8).length) + additionalJson.getBytes(StandardCharsets.UTF_8).length + 2; for(sul.protocol.hncom1.types.GameInfo z2ftzxnjbmzv:gamesInfo){ length+=z2ftzxnjbmzv.length(); };for(String ywnjzxb0zwrmyw5n:acceptedLanguages){ length+=Buffer.varuintLength(ywnjzxb0zwrmyw5n.getBytes(StandardCharsets.UTF_8).length)+ywnjzxb0zwrmyw5n.getBytes(StandardCharsets.UTF_8).length; } return length;
	}

	@Override
	public byte[] encode() {
		this._buffer = new byte[this.length()];
		this.writeBigEndianByte(ID);
		this.writeVarulong(time);
		this.writeVarulong(serverId);
		this.writeVarulong(reservedUuids);
		byte[] zglzcgxheu5hbwu=displayName.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)zglzcgxheu5hbwu.length); this.writeBytes(zglzcgxheu5hbwu);
		this.writeBool(onlineMode);
		this.writeVaruint((int)gamesInfo.length); for(sul.protocol.hncom1.types.GameInfo z2ftzxnjbmzv:gamesInfo){ this.writeBytes(z2ftzxnjbmzv.encode()); }
		this.writeVaruint(online);
		this.writeVarint(max);
		byte[] bgfuz3vhz2u=language.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)bgfuz3vhz2u.length); this.writeBytes(bgfuz3vhz2u);
		this.writeVaruint((int)acceptedLanguages.length); for(String ywnjzxb0zwrmyw5n:acceptedLanguages){ byte[] exduanp4yjb6d3jt=ywnjzxb0zwrmyw5n.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)exduanp4yjb6d3jt.length); this.writeBytes(exduanp4yjb6d3jt); }
		byte[] c29jawfssnnvbg=socialJson.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)c29jawfssnnvbg.length); this.writeBytes(c29jawfssnnvbg);
		byte[] ywrkaxrpb25hbepz=additionalJson.getBytes(StandardCharsets.UTF_8); this.writeVaruint((int)ywrkaxrpb25hbepz.length); this.writeBytes(ywrkaxrpb25hbepz);
		return this.getBuffer();
	}

	@Override
	public void decode(byte[] buffer) {
		this._buffer = buffer;
		readBigEndianByte();
		time=this.readVarulong();
		serverId=this.readVarulong();
		reservedUuids=this.readVarulong();
		int bgvuzglzcgxheu5h=this.readVaruint(); displayName=new String(this.readBytes(bgvuzglzcgxheu5h), StandardCharsets.UTF_8);
		onlineMode=this.readBool();
		int bgdhbwvzsw5mbw=this.readVaruint(); gamesInfo=new sul.protocol.hncom1.types.GameInfo[bgdhbwvzsw5mbw]; for(int z2ftzxnjbmzv=0;z2ftzxnjbmzv<gamesInfo.length;z2ftzxnjbmzv++){ gamesInfo[z2ftzxnjbmzv]=new sul.protocol.hncom1.types.GameInfo(); gamesInfo[z2ftzxnjbmzv]._index=this._index; gamesInfo[z2ftzxnjbmzv].decode(this._buffer); this._index=gamesInfo[z2ftzxnjbmzv]._index; }
		online=this.readVaruint();
		max=this.readVarint();
		int bgvubgfuz3vhz2u=this.readVaruint(); language=new String(this.readBytes(bgvubgfuz3vhz2u), StandardCharsets.UTF_8);
		int bgfjy2vwdgvktgfu=this.readVaruint(); acceptedLanguages=new String[bgfjy2vwdgvktgfu]; for(int ywnjzxb0zwrmyw5n=0;ywnjzxb0zwrmyw5n<acceptedLanguages.length;ywnjzxb0zwrmyw5n++){ int bgvuywnjzxb0zwrm=this.readVaruint(); acceptedLanguages[ywnjzxb0zwrmyw5n]=new String(this.readBytes(bgvuywnjzxb0zwrm), StandardCharsets.UTF_8); }
		int bgvuc29jawfssnnv=this.readVaruint(); socialJson=new String(this.readBytes(bgvuc29jawfssnnv), StandardCharsets.UTF_8);
		int bgvuywrkaxrpb25h=this.readVaruint(); additionalJson=new String(this.readBytes(bgvuywrkaxrpb25h), StandardCharsets.UTF_8);
	}

	public static HubInfo fromBuffer(byte[] buffer) {
		HubInfo ret = new HubInfo();
		ret.decode(buffer);
		return ret;
	}

	@Override
	public String toString() {
		return "HubInfo(time: " + this.time + ", serverId: " + this.serverId + ", reservedUuids: " + this.reservedUuids + ", displayName: " + this.displayName + ", onlineMode: " + this.onlineMode + ", gamesInfo: " + Arrays.deepToString(this.gamesInfo) + ", online: " + this.online + ", max: " + this.max + ", language: " + this.language + ", acceptedLanguages: " + Arrays.deepToString(this.acceptedLanguages) + ", socialJson: " + this.socialJson + ", additionalJson: " + this.additionalJson + ")";
	}

}
