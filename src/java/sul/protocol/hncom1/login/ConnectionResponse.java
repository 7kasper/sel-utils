/*
 * This file has been automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generator: https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
package sul.protocol.hncom1.login;

import java.util.UUID;

import sul.protocol.hncom1.types.*;
import sul.utils.*;

/**
 * Reply always sent after the ConnectionRequest packet. It indicates the status of
 * the connection, which is accepted only when every field of the packet is true.
 */
class ConnectionResponse extends Packet {

	public final static byte ID = (byte)1;

	public final static boolean CLIENTBOUND = true;
	public final static boolean SERVERBOUND = false;

	// status
	public static immutable byte OK = 0;
	public static immutable byte OUTDATED_HUB = 1;
	public static immutable byte OUTDATED_NODE = 2;
	public static immutable byte PASSWORD_REQUIRED = 3;
	public static immutable byte WRONG_PASSWORD = 4;
	public static immutable byte INVALID_NAME_LENGTH = 5;
	public static immutable byte INVALID_NAME_CHARACTERS = 6;
	public static immutable byte NAME_ALREADY_USED = 7;
	public static immutable byte NAME_RESERVED = 8;

	/**
	 * Protocol used by the hub. It must match the node's one otherwise the connection
	 * cannot be established.
	 */
	public int protocol;

	/**
	 * Indicates the status of connection. If not 0, it indicates an error.
	 */
	public byte status;

	@Override
	public int length() {
	}

	@Override
	public byte[] encode() {
		this.buffer = new byte[this.length()];
		this.index = 0;
		this.writeByteB(ID);
		this.writeVaruint(protocol);
		this.writeByteB(status);
		return this.buffer;
	}

	@Override
	public void decode(byte[] buffer) {
		this.buffer = buffer;
		this.index = 0;
	}

}
