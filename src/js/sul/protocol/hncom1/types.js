/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/hncom1.xml
 */
/** @module sul/protocol/hncom1/types */

const Types = {

	Address: class {

		/**
		 * @param bytes
		 *        Bytes of the address. The length may be 4 (for ipv4 addresses) or 16 (for ipv6 addresses). The byte
		 *        order is always big-endian (network order).
		 * @param port
		 *        Port of the address.
		 */
		constructor(bytes=[], port=0) {
			this.bytes = bytes;
			this.port = port;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(bytes.length); for(ynl0zxm in bytes){ this.writeByte(bytes[ynl0zxm]); }
			this.writeBigEndianShort(port);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		/** @return {string} */
		toString() {
			return "Address(bytes: " + this.bytes + ", port: " + this.port + ")";
		}

	},

	Game: class {

		// type
		static get POCKET(){ return 1; }
		static get MINECRAFT(){ return 2; }

		/**
		 * @param type
		 *        Identifier of the game.
		 * @param protocols
		 *        Protocols accepted by the server for the game. They should be ordered from oldest to newest.
		 */
		constructor(type=0, protocols=0) {
			this.type = type;
			this.protocols = protocols;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeByte(type);
			this.writeVaruint(protocols.length); for(chjvdg9jb2xz in protocols){ this.writeVaruint(protocols[chjvdg9jb2xz]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		/** @return {string} */
		toString() {
			return "Game(type: " + this.type + ", protocols: " + this.protocols + ")";
		}

	},

	GameInfo: class {

		/**
		 * @param game
		 *        Informations about the the game and the protocols used.
		 * @param motd
		 *        "Message of the day" which is displayed in the game's server list. It may contain Minecraft formatting
		 *        codes.
		 * @param port
		 *        Port, or main port if the server allows the connection from multiple ports, where the socket is listening
		 *        for connections.
		 */
		constructor(game=null, motd="", port=0) {
			this.game = game;
			this.motd = motd;
			this.port = port;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeBytes(game.encode());
			this.writeString(motd);
			this.writeBigEndianShort(port);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		/** @return {string} */
		toString() {
			return "GameInfo(game: " + this.game + ", motd: " + this.motd + ", port: " + this.port + ")";
		}

	},

	Plugin: class {

		/**
		 * @param name
		 *        Name of the plugin.
		 * @param version
		 *        Version of the plugin, usually in the format `major.minor[.release] [alpha|beta]`.
		 */
		constructor(name="", version="") {
			this.name = name;
			this.version = version;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeString(name);
			this.writeString(version);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		/** @return {string} */
		toString() {
			return "Plugin(name: " + this.name + ", version: " + this.version + ")";
		}

	},

	Skin: class {

		/**
		 * @param name
		 *        Name of the skin.
		 * @param data
		 *        RGBA map of the skin colours. Length should be, if the skin is not empty, 8192 or 16384.
		 */
		constructor(name="", data=[]) {
			this.name = name;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeString(name);
			this.writeVaruint(data.length); for(zgf0yq in data){ this.writeByte(data[zgf0yq]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		/** @return {string} */
		toString() {
			return "Skin(name: " + this.name + ", data: " + this.data + ")";
		}

	}

}

export { Types }
