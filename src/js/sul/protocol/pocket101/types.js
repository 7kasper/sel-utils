/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/pocket101.xml
 */
/** @module sul/protocol/pocket101/types */

const Types = {

	Pack: class extends Buffer {

		constructor(id="", version="", size=0) {
			super();
			this.id = id;
			this.version = version;
			this.size = size;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			var dghpcy5pza=this.encodeString(this.id); this.writeVaruint(dghpcy5pza.length); this.writeBytes(dghpcy5pza);
			var dghpcy52zxjzaw9u=this.encodeString(this.version); this.writeVaruint(dghpcy52zxjzaw9u.length); this.writeBytes(dghpcy52zxjzaw9u);
			this.writeBigEndianLong(this.size);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.id=this.decodeString(this.readBytes(this.readVaruint()));
			this.version=this.decodeString(this.readBytes(this.readVaruint()));
			this.size=this.readBigEndianLong();
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Pack().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Pack(id: " + this.id + ", version: " + this.version + ", size: " + this.size + ")";
		}

	},

	BlockPosition: class extends Buffer {

		constructor(x=0, y=0, z=0) {
			super();
			this.x = x;
			this.y = y;
			this.z = z;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeVarint(this.x);
			this.writeVaruint(this.y);
			this.writeVarint(this.z);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.x=this.readVarint();
			this.y=this.readVaruint();
			this.z=this.readVarint();
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.BlockPosition().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BlockPosition(x: " + this.x + ", y: " + this.y + ", z: " + this.z + ")";
		}

	},

	Slot: class extends Buffer {

		/**
		 * @param id
		 *        Item's id or 0 if the slot is empty.
		 * @param metaAndCount
		 *        Item's meta or uses (unsigned short) left-shifted 8 times and the count (unisgned byte).
		 *        Examples:
		 * @param nbt
		 *        Optional nbt data encoded as a nameless little-endian compound tag.
		 */
		constructor(id=0, metaAndCount=0, nbt=null) {
			super();
			this.id = id;
			this.metaAndCount = metaAndCount;
			this.nbt = nbt;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeVarint(this.id);
			if(id>0){ this.writeVarint(this.metaAndCount); }
			if(id>0){ this.writeLittleEndianShort(this.nbt.length); this.writeBytes(this.nbt); }
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.id=this.readVarint();
			if(id>0){ this.metaAndCount=this.readVarint(); }
			if(id>0){ var bhroaxmubmj0=this.readLittleEndianShort(); this.nbt=this.readBytes(bhroaxmubmj0); }
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Slot().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Slot(id: " + this.id + ", metaAndCount: " + this.metaAndCount + ", nbt: " + this.nbt + ")";
		}

	},

	Attribute: class extends Buffer {

		constructor(min=.0, max=.0, value=.0, default=.0, name="") {
			super();
			this.min = min;
			this.max = max;
			this.value = value;
			this.default = default;
			this.name = name;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeLittleEndianFloat(this.min);
			this.writeLittleEndianFloat(this.max);
			this.writeLittleEndianFloat(this.value);
			this.writeLittleEndianFloat(this.default);
			var dghpcy5uyw1l=this.encodeString(this.name); this.writeVaruint(dghpcy5uyw1l.length); this.writeBytes(dghpcy5uyw1l);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.min=this.readLittleEndianFloat();
			this.max=this.readLittleEndianFloat();
			this.value=this.readLittleEndianFloat();
			this.default=this.readLittleEndianFloat();
			this.name=this.decodeString(this.readBytes(this.readVaruint()));
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Attribute().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Attribute(min: " + this.min + ", max: " + this.max + ", value: " + this.value + ", default: " + this.default + ", name: " + this.name + ")";
		}

	},

	Skin: class extends Buffer {

		/**
		 * @param name
		 *        Name of the skin. It's used to render the shape of the skin correctly.
		 * @param data
		 *        Bytes of the skin in format RGBA. The length should be 8192 or 16382.
		 */
		constructor(name="", data=[]) {
			super();
			this.name = name;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			var dghpcy5uyw1l=this.encodeString(this.name); this.writeVaruint(dghpcy5uyw1l.length); this.writeBytes(dghpcy5uyw1l);
			this.writeVaruint(this.data.length); this.writeBytes(this.data);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.name=this.decodeString(this.readBytes(this.readVaruint()));
			var bhroaxmuzgf0yq=this.readVaruint(); this.data=this.readBytes(bhroaxmuzgf0yq);
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Skin().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Skin(name: " + this.name + ", data: " + this.data + ")";
		}

	},

	PlayerList: class extends Buffer {

		/**
		 * @param uuid
		 *        UUID of the player. If it's associated with an XBOX Live account the player's profile will also be
		 *        available in pause menu.
		 * @param entityId
		 *        Player's id, used to associate the skin with the game's entity spawned with {AddPlayer}.
		 * @param displayName
		 *        Player's display name, that can contain Minecraft's formatting codes. It shouldn't contain suffixes
		 *        nor prefixes.
		 * @param skin
		 *        Player's skin usually given in the {Login}'s packet body.
		 */
		constructor(uuid=new Uint8Array(16), entityId=0, displayName="", skin=null) {
			super();
			this.uuid = uuid;
			this.entityId = entityId;
			this.displayName = displayName;
			this.skin = skin;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBytes(this.uuid);
			this.writeVarlong(this.entityId);
			var dghpcy5kaxnwbgf5=this.encodeString(this.displayName); this.writeVaruint(dghpcy5kaxnwbgf5.length); this.writeBytes(dghpcy5kaxnwbgf5);
			this.writeBytes(this.skin.encode());
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.uuid=this.readBytes(16);
			this.entityId=this.readVarlong();
			this.displayName=this.decodeString(this.readBytes(this.readVaruint()));
			this.skin=Types.Skin.fromBuffer(this._buffer); this._buffer=this.skin._buffer;
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.PlayerList().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerList(uuid: " + this.uuid + ", entityId: " + this.entityId + ", displayName: " + this.displayName + ", skin: " + this.skin + ")";
		}

	},

	Recipe: class extends Buffer {

		// type
		static get SHAPELESS(){ return 0; }
		static get SHAPED(){ return 1; }
		static get FURNACE(){ return 2; }
		static get FURNACE_DATA(){ return 3; }
		static get MULTI(){ return 4; }

		constructor(type=0, data=null) {
			super();
			this.type = type;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeVarint(this.type);
			this.writeBytes(this.data);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.type=this.readVarint();
			this.data=Array.from(this._buffer); this._buffer=[];
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Recipe().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Recipe(type: " + this.type + ", data: " + this.data + ")";
		}

	}

}

//export { Types }
