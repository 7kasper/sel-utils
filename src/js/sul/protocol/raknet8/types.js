/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
/** @module sul/protocol/raknet8/types */

const Types = {

	Address: class extends Buffer {

		constructor(type=0, ipv4=0, ipv6=[], port=0) {
			super();
			this.type = type;
			this.ipv4 = ipv4;
			this.ipv6 = ipv6;
			this.port = port;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(this.type);
			this.writeBigEndianInt(this.ipv4);
			this.writeBytes(this.ipv6);
			this.writeBigEndianShort(this.port);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.type=this.readBigEndianByte();
			this.ipv4=this.readBigEndianInt();
			var bhroaxmuaxb2ng=16; this.ipv6=this.readBytes(bhroaxmuaxb2ng);
			this.port=this.readBigEndianShort();
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Address().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Address(type: " + this.type + ", ipv4: " + this.ipv4 + ", ipv6: " + this.ipv6 + ", port: " + this.port + ")";
		}

	},

	Acknowledge: class extends Buffer {

		constructor(unique=false, first=0, last=0) {
			super();
			this.unique = unique;
			this.first = first;
			this.last = last;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(this.unique?1:0);
			this.writeLittleEndianTriad(this.first);
			this.writeLittleEndianTriad(this.last);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.unique=this.readBigEndianByte()!==0;
			this.first=this.readLittleEndianTriad();
			this.last=this.readLittleEndianTriad();
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Acknowledge().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Acknowledge(unique: " + this.unique + ", first: " + this.first + ", last: " + this.last + ")";
		}

	},

	Encapsulation: class extends Buffer {

		constructor(info=0, length=0, messageIndex=0, orderIndex=0, orderChannel=0, split=null, payload=null) {
			super();
			this.info = info;
			this.length = length;
			this.messageIndex = messageIndex;
			this.orderIndex = orderIndex;
			this.orderChannel = orderChannel;
			this.split = split;
			this.payload = payload;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianByte(this.info);
			this.writeBigEndianShort(this.length);
			this.writeLittleEndianTriad(this.messageIndex);
			this.writeLittleEndianTriad(this.orderIndex);
			this.writeBigEndianByte(this.orderChannel);
			this.writeBytes(this.split.encode());
			this.writeBytes(this.payload);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.info=this.readBigEndianByte();
			this.length=this.readBigEndianShort();
			this.messageIndex=this.readLittleEndianTriad();
			this.orderIndex=this.readLittleEndianTriad();
			this.orderChannel=this.readBigEndianByte();
			this.split=Types.Split.fromBuffer(this._buffer.slice(this._index)); this._index+=this.split._index;
			this.payload=this.readBytes(this._buffer.length-this._index);
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Encapsulation().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Encapsulation(info: " + this.info + ", length: " + this.length + ", messageIndex: " + this.messageIndex + ", orderIndex: " + this.orderIndex + ", orderChannel: " + this.orderChannel + ", split: " + this.split + ", payload: " + this.payload + ")";
		}

	},

	Split: class extends Buffer {

		constructor(count=0, id=0, order=0) {
			super();
			this.count = count;
			this.id = id;
			this.order = order;
		}

		/** @return {Uint8Array} */
		encode() {
			this._buffer = [];
			this.writeBigEndianInt(this.count);
			this.writeBigEndianShort(this.id);
			this.writeBigEndianInt(this.order);
			return new Uint8Array(this._buffer);
		}

		/** @param {Uint8Array}|{Array} buffer */
		decode(_buffer) {
			this._buffer = Array.from(_buffer);
			this._index = 0;
			this.count=this.readBigEndianInt();
			this.id=this.readBigEndianShort();
			this.order=this.readBigEndianInt();
			return this;
		}

		static fromBuffer(buffer) {
			return new Types.Split().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Split(count: " + this.count + ", id: " + this.id + ", order: " + this.order + ")";
		}

	}

}

//export { Types }
