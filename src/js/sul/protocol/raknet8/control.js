/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/raknet8.xml
 */
/** @module sul/protocol/raknet8/control */

//import Types from 'types';

const Control = {

	Ack: class {

		static get ID(){ return 192; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(packets=[]) {
			this.packets = packets;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeByte(this.ID);
			this.writeBigEndianShort(packets.length); for(cgfja2v0cw in packets){ this.writeBytes(packets[cgfja2v0cw].encode()); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Control.Ack().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Ack(packets: " + this.packets + ")";
		}

	},

	Nack: class {

		static get ID(){ return 160; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(packets=[]) {
			this.packets = packets;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeByte(this.ID);
			this.writeBigEndianShort(packets.length); for(cgfja2v0cw in packets){ this.writeBytes(packets[cgfja2v0cw].encode()); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Control.Nack().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Nack(packets: " + this.packets + ")";
		}

	},

	Encapsulated: class {

		static get ID(){ return 132; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return true; }

		constructor(count=0, encapsulation=null) {
			this.count = count;
			this.encapsulation = encapsulation;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeByte(this.ID);
			this.writeLittleEndianTriad(count);
			this.writeBytes(encapsulation.encode());
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Control.Encapsulated().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Encapsulated(count: " + this.count + ", encapsulation: " + this.encapsulation + ")";
		}

	},

}

//export { Control };
