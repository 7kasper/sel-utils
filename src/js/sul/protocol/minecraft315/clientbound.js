/*
 * This file was automatically generated by sel-utils and
 * released under the GNU General Public License version 3.
 *
 * License: https://github.com/sel-project/sel-utils/blob/master/LICENSE
 * Repository: https://github.com/sel-project/sel-utils
 * Generated from https://github.com/sel-project/sel-utils/blob/master/xml/protocol/minecraft315.xml
 */
/** @module sul/protocol/minecraft315/clientbound */

//import Types from 'types';

const Clientbound = {

	SpawnObject: class {

		static get ID(){ return 0; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, uuid=new Uint8Array(16), type=0, position={x:0,y:0,z:0}, pitch=0, yaw=0, data=0, velocity={x:0,y:0,z:0}) {
			this.entityId = entityId;
			this.uuid = uuid;
			this.type = type;
			this.position = position;
			this.pitch = pitch;
			this.yaw = yaw;
			this.data = data;
			this.velocity = velocity;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
			this.writeByte(type);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeByte(pitch);
			this.writeByte(yaw);
			this.writeBigEndianInt(data);
			this.writeBigEndianShort(velocity.x); this.writeBigEndianShort(velocity.y); this.writeBigEndianShort(velocity.z);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnObject().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnObject(entityId: " + this.entityId + ", uuid: " + this.uuid + ", type: " + this.type + ", position: " + this.position + ", pitch: " + this.pitch + ", yaw: " + this.yaw + ", data: " + this.data + ", velocity: " + this.velocity + ")";
		}

	},

	SpawnExperienceOrb: class {

		static get ID(){ return 1; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, position={x:0,y:0,z:0}, count=0) {
			this.entityId = entityId;
			this.position = position;
			this.count = count;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeBigEndianShort(count);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnExperienceOrb().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnExperienceOrb(entityId: " + this.entityId + ", position: " + this.position + ", count: " + this.count + ")";
		}

	},

	SpawnGlobalEntity: class {

		static get ID(){ return 2; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// type
		static get THUNDERBOLT(){ return 1; }

		constructor(entityId=0, type=0, position={x:0,y:0,z:0}) {
			this.entityId = entityId;
			this.type = type;
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeByte(type);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnGlobalEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnGlobalEntity(entityId: " + this.entityId + ", type: " + this.type + ", position: " + this.position + ")";
		}

	},

	SpawnMob: class {

		static get ID(){ return 3; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, uuid=new Uint8Array(16), type=0, position={x:0,y:0,z:0}, yaw=0, pitch=0, headPitch=0, velocity={x:0,y:0,z:0}, metadata=null) {
			this.entityId = entityId;
			this.uuid = uuid;
			this.type = type;
			this.position = position;
			this.yaw = yaw;
			this.pitch = pitch;
			this.headPitch = headPitch;
			this.velocity = velocity;
			this.metadata = metadata;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
			this.writeVaruint(type);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeByte(yaw);
			this.writeByte(pitch);
			this.writeByte(headPitch);
			this.writeBigEndianShort(velocity.x); this.writeBigEndianShort(velocity.y); this.writeBigEndianShort(velocity.z);
			this.writeBytes(metadata.encode());
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnMob().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnMob(entityId: " + this.entityId + ", uuid: " + this.uuid + ", type: " + this.type + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", headPitch: " + this.headPitch + ", velocity: " + this.velocity + ", metadata: " + this.metadata + ")";
		}

	},

	SpawnPainting: class {

		static get ID(){ return 4; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// direction
		static get SOUTH(){ return 0; }
		static get WEST(){ return 1; }
		static get NORTH(){ return 2; }
		static get EAST(){ return 3; }

		constructor(entityId=0, uuid=new Uint8Array(16), title="", position=0, direction=0) {
			this.entityId = entityId;
			this.uuid = uuid;
			this.title = title;
			this.position = position;
			this.direction = direction;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
			this.writeString(title);
			this.writeBigEndianLong(position);
			this.writeByte(direction);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnPainting().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnPainting(entityId: " + this.entityId + ", uuid: " + this.uuid + ", title: " + this.title + ", position: " + this.position + ", direction: " + this.direction + ")";
		}

	},

	SpawnPlayer: class {

		static get ID(){ return 5; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, uuid=new Uint8Array(16), position={x:0,y:0,z:0}, yaw=0, pitch=0, metadata=null) {
			this.entityId = entityId;
			this.uuid = uuid;
			this.position = position;
			this.yaw = yaw;
			this.pitch = pitch;
			this.metadata = metadata;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeByte(yaw);
			this.writeByte(pitch);
			this.writeBytes(metadata.encode());
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnPlayer().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnPlayer(entityId: " + this.entityId + ", uuid: " + this.uuid + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", metadata: " + this.metadata + ")";
		}

	},

	Animation: class {

		static get ID(){ return 6; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// animation
		static get SWING_MAIN_ARM(){ return 0; }
		static get TAKE_DAMAGE(){ return 1; }
		static get LEAVE_BED(){ return 2; }
		static get SWING_OFFHAND(){ return 3; }
		static get CRITICAL_EFFECT(){ return 4; }
		static get MAGICAL_CRITICAL_EFFECT(){ return 5; }

		constructor(entityId=0, animation=0) {
			this.entityId = entityId;
			this.animation = animation;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeByte(animation);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Animation().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Animation(entityId: " + this.entityId + ", animation: " + this.animation + ")";
		}

	},

	Statistics: class {

		static get ID(){ return 7; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(statistics=[]) {
			this.statistics = statistics;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(statistics.length); for(c3rhdglzdgljcw in statistics){ this.writeBytes(statistics[c3rhdglzdgljcw].encode()); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Statistics().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Statistics(statistics: " + this.statistics + ")";
		}

	},

	BlockBreakAnimation: class {

		static get ID(){ return 8; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, position=0, stage=0) {
			this.entityId = entityId;
			this.position = position;
			this.stage = stage;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianLong(position);
			this.writeByte(stage);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.BlockBreakAnimation().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BlockBreakAnimation(entityId: " + this.entityId + ", position: " + this.position + ", stage: " + this.stage + ")";
		}

	},

	UpdateBlockEntity: class {

		static get ID(){ return 9; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// action
		static get MOB_SPAWNER_DATA(){ return 1; }
		static get COMMAND_BLOCK_TEXT(){ return 2; }
		static get BEACON_POWERS(){ return 3; }
		static get MOB_HEAD_DATA(){ return 4; }
		static get FLOWER_POT_FLOWER(){ return 5; }
		static get BANNER_DATA(){ return 6; }
		static get STRUCTURE_DATA(){ return 7; }
		static get END_GATEWAY_DESTINATION(){ return 8; }
		static get SIGN_TEXT(){ return 9; }
		static get SHULKER_BOX_DECLARATION(){ return 10; }

		constructor(position=0, action=0, nbt=null) {
			this.position = position;
			this.action = action;
			this.nbt = nbt;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(position);
			this.writeByte(action);
			this.writeBytes(nbt);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.UpdateBlockEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateBlockEntity(position: " + this.position + ", action: " + this.action + ", nbt: " + this.nbt + ")";
		}

	},

	BlockAction: class {

		static get ID(){ return 10; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// action
		static get NOTE_BLOCK_HARP(){ return 0; }
		static get NOTE_BLOCK_BASS_DRUM(){ return 1; }
		static get NOTE_BLOCK_SNARE_DRUM(){ return 2; }
		static get NOTE_BLOCK_CLICKS(){ return 3; }
		static get NOTE_BLOCK_STICKS(){ return 3; }
		static get NOTE_BLOCK_BASS_GUITAR(){ return 4; }
		static get PISTON_EXTEND(){ return 0; }
		static get PISTON_RETRACT(){ return 1; }
		static get CHEST_WATCHERS(){ return 1; }
		static get BEACON_RECALCULATE(){ return 1; }
		static get MOB_SPAWNER_RESET_DELAY(){ return 1; }
		static get END_GATEWAY_YELLOW_BEAM(){ return 1; }

		// parameter
		static get PISTON_DOWN(){ return 0; }
		static get PISTON_UP(){ return 1; }
		static get PISTON_SOUTH(){ return 2; }
		static get PISTON_WEST(){ return 3; }
		static get PISTON_NORTH(){ return 4; }
		static get PISTON_EAST(){ return 5; }

		constructor(position=0, action=0, parameter=0, blockType=0) {
			this.position = position;
			this.action = action;
			this.parameter = parameter;
			this.blockType = blockType;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(position);
			this.writeByte(action);
			this.writeByte(parameter);
			this.writeVaruint(blockType);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.BlockAction().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BlockAction(position: " + this.position + ", action: " + this.action + ", parameter: " + this.parameter + ", blockType: " + this.blockType + ")";
		}

	},

	BlockChange: class {

		static get ID(){ return 11; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position=0, block=0) {
			this.position = position;
			this.block = block;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(position);
			this.writeVaruint(block);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.BlockChange().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BlockChange(position: " + this.position + ", block: " + this.block + ")";
		}

	},

	BossBar: class {

		static get ID(){ return 12; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(uuid=new Uint8Array(16), action=0) {
			this.uuid = uuid;
			this.action = action;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(uuid.getLeastSignificantBits()); this.writeBigEndianLong(uuid.getMostSignificantBits());
			this.writeVaruint(action);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.BossBar().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "BossBar(uuid: " + this.uuid + ", action: " + this.action + ")";
		}

	},

	ServerDifficulty: class {

		static get ID(){ return 13; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// difficulty
		static get PEACEFUL(){ return 0; }
		static get EASY(){ return 1; }
		static get NORMAL(){ return 2; }
		static get HARD(){ return 3; }

		constructor(difficulty=0) {
			this.difficulty = difficulty;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(difficulty);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ServerDifficulty().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ServerDifficulty(difficulty: " + this.difficulty + ")";
		}

	},

	TabComplete: class {

		static get ID(){ return 14; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(matches=[]) {
			this.matches = matches;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(matches.length); for(bwf0y2hlcw in matches){ this.writeString(matches[bwf0y2hlcw]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.TabComplete().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "TabComplete(matches: " + this.matches + ")";
		}

	},

	ChatMessage: class {

		static get ID(){ return 15; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// position
		static get CHAT(){ return 0; }
		static get SYSTEM_MESSAGE(){ return 1; }
		static get ABOVE_HOTBAR(){ return 2; }

		constructor(message="", position=0) {
			this.message = message;
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(message);
			this.writeByte(position);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ChatMessage().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ChatMessage(message: " + this.message + ", position: " + this.position + ")";
		}

	},

	MultiBlockChange: class {

		static get ID(){ return 16; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(chunk={x:0,z:0}, changes=[]) {
			this.chunk = chunk;
			this.changes = changes;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(chunk.x); this.writeBigEndianInt(chunk.z);
			this.writeVaruint(changes.length); for(y2hhbmdlcw in changes){ this.writeBytes(changes[y2hhbmdlcw].encode()); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.MultiBlockChange().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "MultiBlockChange(chunk: " + this.chunk + ", changes: " + this.changes + ")";
		}

	},

	ConfirmTransaction: class {

		static get ID(){ return 17; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, action=0, accepted=false) {
			this.window = window;
			this.action = action;
			this.accepted = accepted;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(window);
			this.writeBigEndianShort(action);
			this.writeBool(accepted);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ConfirmTransaction().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ConfirmTransaction(window: " + this.window + ", action: " + this.action + ", accepted: " + this.accepted + ")";
		}

	},

	CloseWindow: class {

		static get ID(){ return 18; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0) {
			this.window = window;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(window);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.CloseWindow().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "CloseWindow(window: " + this.window + ")";
		}

	},

	OpenWindow: class {

		static get ID(){ return 19; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, type="", title="", slots=0) {
			this.window = window;
			this.type = type;
			this.title = title;
			this.slots = slots;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(window);
			this.writeString(type);
			this.writeString(title);
			this.writeByte(slots);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.OpenWindow().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "OpenWindow(window: " + this.window + ", type: " + this.type + ", title: " + this.title + ", slots: " + this.slots + ")";
		}

	},

	WindowItems: class {

		static get ID(){ return 20; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, slots=null) {
			this.window = window;
			this.slots = slots;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(window);
			this.writeBigEndianShort(slots.length); for(c2xvdhm in slots){ this.writeBytes(slots[c2xvdhm].encode()); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.WindowItems().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "WindowItems(window: " + this.window + ", slots: " + this.slots + ")";
		}

	},

	WindowProperty: class {

		static get ID(){ return 21; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// property
		static get FURNANCE_FIRE_ICON(){ return 0; }
		static get FURNACE_MAX_FUEL_BURN_TIME(){ return 1; }
		static get FURNACE_PROGRESS_ARROW(){ return 2; }
		static get FURNCE_MAX_PROGRESS(){ return 3; }
		static get ENCHANTMENT_LEVEL_REQUIREMENT_TOP(){ return 0; }
		static get ENCHANTMENT_LEVEL_REQUIREMENT_MIDDLE(){ return 1; }
		static get ENCHANTMENT_LEVEL_REQUIREMENT_BOTTOM(){ return 2; }
		static get ENCHANTMENT_SEED(){ return 3; }
		static get ENCHANTMENT_ID_TOP(){ return 4; }
		static get ENCHANTMENT_ID_MIDDLE(){ return 5; }
		static get ENCHANTMENT_ID_BOTTOM(){ return 6; }
		static get ENCHANTMENT_LEVEL_TOP(){ return 7; }
		static get ENCHANTMENT_LEVEL_MIDDLE(){ return 8; }
		static get ENCHANTMENT_LEVEL_BOTTOM(){ return 9; }
		static get BEACON_POWER_LEVEL(){ return 0; }
		static get BEACON_FIRST_EFFECT(){ return 1; }
		static get BEACON_SECOND_EFFECT(){ return 2; }
		static get ANVIL_REPAIR_COST(){ return 0; }
		static get BREWING_STAND_BREW_TIME(){ return 0; }

		constructor(window=0, property=0, value=0) {
			this.window = window;
			this.property = property;
			this.value = value;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(window);
			this.writeBigEndianShort(property);
			this.writeBigEndianShort(value);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.WindowProperty().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "WindowProperty(window: " + this.window + ", property: " + this.property + ", value: " + this.value + ")";
		}

	},

	SetSlot: class {

		static get ID(){ return 22; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(window=0, slot=0, item=null) {
			this.window = window;
			this.slot = slot;
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(window);
			this.writeBigEndianShort(slot);
			this.writeBytes(item.encode());
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SetSlot().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetSlot(window: " + this.window + ", slot: " + this.slot + ", item: " + this.item + ")";
		}

	},

	SetCooldown: class {

		static get ID(){ return 23; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(item=0, cooldown=0) {
			this.item = item;
			this.cooldown = cooldown;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(item);
			this.writeVaruint(cooldown);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SetCooldown().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetCooldown(item: " + this.item + ", cooldown: " + this.cooldown + ")";
		}

	},

	PluginMessage: class {

		static get ID(){ return 24; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(channel="", data=null) {
			this.channel = channel;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(channel);
			this.writeBytes(data);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.PluginMessage().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PluginMessage(channel: " + this.channel + ", data: " + this.data + ")";
		}

	},

	NamedSoundEffect: class {

		static get ID(){ return 25; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(name="", category=0, position={x:0,y:0,z:0}, volume=.0, pitch=.0) {
			this.name = name;
			this.category = category;
			this.position = position;
			this.volume = volume;
			this.pitch = pitch;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(name);
			this.writeVaruint(category);
			this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.y); this.writeBigEndianInt(position.z);
			this.writeBigEndianFloat(volume);
			this.writeBigEndianFloat(pitch);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.NamedSoundEffect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "NamedSoundEffect(name: " + this.name + ", category: " + this.category + ", position: " + this.position + ", volume: " + this.volume + ", pitch: " + this.pitch + ")";
		}

	},

	Disconnect: class {

		static get ID(){ return 26; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(reason="") {
			this.reason = reason;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(reason);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Disconnect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Disconnect(reason: " + this.reason + ")";
		}

	},

	EntityStatus: class {

		static get ID(){ return 27; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// status
		static get SPAWN_TIPPED_ARROW_PARTICLE_EFFECTS(){ return 0; }
		static get PLAY_JUMPING_ANIMATION_AND_PARTICLES(){ return 1; }
		static get RESET_SPAWNER_DELAY(){ return 1; }
		static get PLAY_HURT_ANIMATION_AND_SOUND(){ return 2; }
		static get PLAY_DEATH_ANIMATION_AND_SOUND(){ return 3; }
		static get PLAY_ATTACK_ANIMATION_AND_SOUND(){ return 4; }
		static get SPAWN_SMOKE_PARTICLES(){ return 6; }
		static get SPAWN_HEART_PARTICLES(){ return 7; }
		static get PLAY_SHAKING_WATER_ANIMATION(){ return 8; }
		static get FINISHED_CONSUMING(){ return 9; }
		static get PLAY_EATING_GRASS_ANIMATION(){ return 10; }
		static get IGNITE_MINECART_TNT(){ return 10; }
		static get HOLD_POPPY(){ return 11; }
		static get SPAWN_VILLAGER_MATING_HEART_PARTICLES(){ return 12; }
		static get SPAWN_VILLAGER_ANGRY_PARTICLES(){ return 13; }
		static get SPAWN_VILLAGER_HAPPY_PARTICLES(){ return 14; }
		static get SPAWN_WITCH_MAGIC_PARTICLES(){ return 15; }
		static get PLAY_ZOMBIE_CURE_FINISHED_SOUND(){ return 16; }
		static get SPAWN_FIREWORK_EXPLOSION_EFFECT(){ return 17; }
		static get SPAWN_LOVE_PARTICLES(){ return 18; }
		static get RESET_SQUID_ROTATION(){ return 19; }
		static get SPAWN_EXPLOSION_PARTICLES(){ return 20; }
		static get PLAY_GUARDIAN_SOUND_EFFECT(){ return 21; }
		static get ENABLE_REDUCED_DEBUG_SCREEN(){ return 22; }
		static get DISABLE_REDUCED_DEBUG_SCREEN(){ return 23; }
		static get SET_OP_PERMISSION_LEVEL_0(){ return 24; }
		static get SET_OP_PERMISSION_LEVEL_1(){ return 25; }
		static get SET_OP_PERMISSION_LEVEL_2(){ return 26; }
		static get SET_OP_PERMISSION_LEVEL_3(){ return 27; }
		static get SET_OP_PERMISSION_LEVEL_4(){ return 28; }
		static get PLAY_SHIELD_BLOCK_SOUND(){ return 29; }
		static get PLAY_SHIELD_BREAK_SOUND(){ return 30; }
		static get HOOK_KNOCKBACK(){ return 31; }
		static get PLAY_HIT_SOUND(){ return 32; }
		static get PLAY_THORNS_HURT_ANIMATION_AND_SOUND(){ return 33; }
		static get REMOVE_POPPY(){ return 34; }
		static get PLAY_TOTEM_UNDYING_ANIMATION(){ return 35; }

		constructor(entityId=0, status=0) {
			this.entityId = entityId;
			this.status = status;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(entityId);
			this.writeByte(status);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityStatus().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityStatus(entityId: " + this.entityId + ", status: " + this.status + ")";
		}

	},

	Explosion: class {

		static get ID(){ return 28; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,y:0,z:0}, radius=.0, records=null, motion={x:0,y:0,z:0}) {
			this.position = position;
			this.radius = radius;
			this.records = records;
			this.motion = motion;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianFloat(position.x); this.writeBigEndianFloat(position.y); this.writeBigEndianFloat(position.z);
			this.writeBigEndianFloat(radius);
			this.writeBigEndianInt(records.length); for(cmvjb3jkcw in records){ this.writeByte(records[cmvjb3jkcw].x); this.writeByte(records[cmvjb3jkcw].y); this.writeByte(records[cmvjb3jkcw].z); }
			this.writeBigEndianFloat(motion.x); this.writeBigEndianFloat(motion.y); this.writeBigEndianFloat(motion.z);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Explosion().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Explosion(position: " + this.position + ", radius: " + this.radius + ", records: " + this.records + ", motion: " + this.motion + ")";
		}

	},

	UnloadChunk: class {

		static get ID(){ return 29; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,z:0}) {
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.z);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.UnloadChunk().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UnloadChunk(position: " + this.position + ")";
		}

	},

	ChangeGameState: class {

		static get ID(){ return 30; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// reason
		static get INVALID_BED(){ return 0; }
		static get END_RAINING(){ return 1; }
		static get BEGIN_RAINING(){ return 2; }
		static get CHANGE_GAMEMODE(){ return 3; }
		static get EXIT_END(){ return 4; }
		static get DEMO_MESSAGE(){ return 5; }
		static get ARROW_HITTING_PLAYER(){ return 6; }
		static get FADE_VALUE(){ return 7; }
		static get FADE_TIME(){ return 8; }
		static get PLAY_ELDER_GUARDIAN_MOB_APPEARANCE(){ return 10; }

		// value
		static get SURVIVAL(){ return 0; }
		static get CREATIVE(){ return 1; }
		static get ADVENTURE(){ return 2; }
		static get SPECTATOR(){ return 3; }
		static get RESPAWN_IMMEDIATELY(){ return 0; }
		static get RESPAWN_AFTER_CREDITS(){ return 1; }
		static get SHOW_DEMO_SCREEN(){ return 0; }
		static get TELL_MOVEMENT_CONTROLS(){ return 101; }
		static get TELL_JUMP_CONTROLS(){ return 102; }
		static get TELL_INVENTORY_CONTROLS(){ return 103; }
		static get BRIGHT(){ return 0; }
		static get DARK(){ return 1; }

		constructor(reason=0, value=.0) {
			this.reason = reason;
			this.value = value;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(reason);
			this.writeBigEndianFloat(value);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ChangeGameState().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ChangeGameState(reason: " + this.reason + ", value: " + this.value + ")";
		}

	},

	KeepAlive: class {

		static get ID(){ return 31; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(id=0) {
			this.id = id;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(id);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.KeepAlive().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "KeepAlive(id: " + this.id + ")";
		}

	},

	ChunkData: class {

		static get ID(){ return 32; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,z:0}, full=false, sections=0, data=[], tiles=null) {
			this.position = position;
			this.full = full;
			this.sections = sections;
			this.data = data;
			this.tiles = tiles;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.z);
			this.writeBool(full);
			this.writeVaruint(sections);
			this.writeVaruint(data.length); for(zgf0yq in data){ this.writeByte(data[zgf0yq]); }
			this.writeBytes(tiles);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ChunkData().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ChunkData(position: " + this.position + ", full: " + this.full + ", sections: " + this.sections + ", data: " + this.data + ", tiles: " + this.tiles + ")";
		}

	},

	Effect: class {

		static get ID(){ return 33; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// effect id
		static get DISPENSER_DISPENSE(){ return 1000; }
		static get DISPENSER_FAIL_DISPENSE(){ return 1001; }
		static get DISPENSER_SHOOT(){ return 1002; }
		static get ENDER_EYE_LAUNCH(){ return 1003; }
		static get FIREWORK_SHOT(){ return 1004; }
		static get IRON_DOOR_OPEN(){ return 1005; }
		static get WOODEN_DOOR_OPEN(){ return 1006; }
		static get WOODEN_TRAPDOOR_OPEN(){ return 1007; }
		static get FENCE_GATE_OPEN(){ return 1008; }
		static get FIRE_EXTINGUISH(){ return 1009; }
		static get PLAY_RECORD(){ return 1010; }
		static get IRON_DOOR_CLOSE(){ return 1011; }
		static get WOODEN_DOOR_CLOSE(){ return 1012; }
		static get WOODEN_TRAPDOOR_CLOSE(){ return 1013; }
		static get FENCE_GATE_CLOSE(){ return 1014; }
		static get GHAST_WARN(){ return 1015; }
		static get GHAST_SHOOT(){ return 1016; }
		static get ENDERDRAGON_SHOOT(){ return 1017; }
		static get BLAZE_SHOOT(){ return 1018; }
		static get ZOMBIE_ATTACK_WOOD_DOOR(){ return 1019; }
		static get ZOMBIE_ATTACK_IRON_DOOR(){ return 1020; }
		static get ZOMBIE_BREAK_WOOD_DOOR(){ return 1021; }
		static get WITHER_BREAK_BLOCK(){ return 1022; }
		static get WITHER_SPAWN(){ return 1023; }
		static get WITHER_SHOOT(){ return 1024; }
		static get BAT_TAKE_OFF(){ return 1025; }
		static get ZOMBIE_INFECT_VILLAGER(){ return 1026; }
		static get ZOMBIE_VILLAGER_CONVERT(){ return 1027; }
		static get ENDER_DRAGON_BREATH(){ return 1028; }
		static get ANVIL_BREAK(){ return 1029; }
		static get ANVIL_USE(){ return 1030; }
		static get ANVIL_LAND(){ return 1031; }
		static get PORTAL_TRAVEL(){ return 1032; }
		static get CHORUS_FLOWER_GROW(){ return 1033; }
		static get CHORUS_FLOWER_DIE(){ return 1034; }
		static get BREWING_STAND_BREW(){ return 1035; }
		static get IRON_TRAPDOOR_OPEN(){ return 1036; }
		static get IRON_TRAPDOOR_CLOSE(){ return 1037; }
		static get SPAWN_10_SMOKE_PARTICLES(){ return 2000; }
		static get BREAK_BREAK_PARTICLES_AND_SOUND(){ return 2001; }
		static get SPLASH_POTION_PARTICLES_AND_SOUND(){ return 2002; }
		static get ENDER_EYE_BREAK_PARTICLES_AND_SOUND(){ return 2003; }
		static get MOB_SPAWN_PARTICLES(){ return 2004; }
		static get BONEMEAL_PARTICLES(){ return 2005; }
		static get DRAGON_BREATH(){ return 2006; }
		static get END_GATEWAY_SPAWN(){ return 3000; }
		static get ENDERDRAGON_GROWL(){ return 3001; }

		constructor(effectId=0, position=0, data=0, disableVolume=false) {
			this.effectId = effectId;
			this.position = position;
			this.data = data;
			this.disableVolume = disableVolume;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(effectId);
			this.writeBigEndianLong(position);
			this.writeBigEndianInt(data);
			this.writeBool(disableVolume);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Effect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Effect(effectId: " + this.effectId + ", position: " + this.position + ", data: " + this.data + ", disableVolume: " + this.disableVolume + ")";
		}

	},

	Particle: class {

		static get ID(){ return 34; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// particle id
		static get EXPLODE(){ return 0; }
		static get LARGE_EXPLOSION(){ return 1; }
		static get HUGE_EXPLOSION(){ return 2; }
		static get FIREWORK_SPARK(){ return 3; }
		static get BUBBLE(){ return 4; }
		static get SPLASH(){ return 5; }
		static get WAKE(){ return 6; }
		static get SUSPENDED(){ return 7; }
		static get DEPTH_SUSPEND(){ return 8; }
		static get CRIT(){ return 9; }
		static get MAGIC_CRIT(){ return 10; }
		static get SMOKE(){ return 11; }
		static get LARGE_SMOKE(){ return 12; }
		static get SPELL(){ return 13; }
		static get INSTANT_SPELL(){ return 14; }
		static get MOB_SPELL(){ return 15; }
		static get MOB_SPELL_AMBIENT(){ return 16; }
		static get WITCH_MAGIC(){ return 17; }
		static get DRIP_WATER(){ return 18; }
		static get DRIP_LAVA(){ return 19; }
		static get ANGRY_VILLAGER(){ return 20; }
		static get HAPPY_VILLAGER(){ return 21; }
		static get TOWN_AURA(){ return 22; }
		static get NOTE(){ return 23; }
		static get PORTAL(){ return 24; }
		static get ENCHANTMENT_TABLE(){ return 25; }
		static get FLAME(){ return 26; }
		static get LAVA(){ return 27; }
		static get FOOTSTEP(){ return 28; }
		static get CLOUD(){ return 29; }
		static get RED_DUST(){ return 30; }
		static get SNOWBALL_POOF(){ return 31; }
		static get SNOW_SHOVEL(){ return 32; }
		static get SLIME(){ return 33; }
		static get HEART(){ return 34; }
		static get BARRIER(){ return 35; }
		static get ITEM_CRACK(){ return 36; }
		static get BLOCK_CRACK(){ return 37; }
		static get BLOCK_DUST(){ return 38; }
		static get DROPLET(){ return 39; }
		static get TAKE(){ return 40; }
		static get MOB_APPEARANCE(){ return 41; }
		static get DRAGON_BREATH(){ return 42; }
		static get ENDROD(){ return 43; }
		static get DAMAGE_INDICATOR(){ return 44; }
		static get SWEEP_ATTACK(){ return 45; }
		static get FALLING_DUST(){ return 46; }

		constructor(particleId=0, longDistance=false, position={x:0,y:0,z:0}, offset={x:0,y:0,z:0}, data=.0, count=0, additionalData=0) {
			this.particleId = particleId;
			this.longDistance = longDistance;
			this.position = position;
			this.offset = offset;
			this.data = data;
			this.count = count;
			this.additionalData = additionalData;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(particleId);
			this.writeBool(longDistance);
			this.writeBigEndianFloat(position.x); this.writeBigEndianFloat(position.y); this.writeBigEndianFloat(position.z);
			this.writeBigEndianFloat(offset.x); this.writeBigEndianFloat(offset.y); this.writeBigEndianFloat(offset.z);
			this.writeBigEndianFloat(data);
			this.writeBigEndianInt(count);
			for(ywrkaxrpb25hberh in additionalData){ this.writeVaruint(additionalData[ywrkaxrpb25hberh]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Particle().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Particle(particleId: " + this.particleId + ", longDistance: " + this.longDistance + ", position: " + this.position + ", offset: " + this.offset + ", data: " + this.data + ", count: " + this.count + ", additionalData: " + this.additionalData + ")";
		}

	},

	JoinGame: class {

		static get ID(){ return 35; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// gamemode
		static get SURVIVAL(){ return 0; }
		static get CREATIVE(){ return 1; }
		static get ADVENTURE(){ return 2; }
		static get SPECTATOR(){ return 3; }

		// dimension
		static get NETHER(){ return -1; }
		static get OVERWORLD(){ return 0; }
		static get END(){ return 1; }

		// difficulty
		static get PEACEFUL(){ return 0; }
		static get EASY(){ return 1; }
		static get NORMAL(){ return 2; }
		static get HARD(){ return 3; }

		// level type
		static get INFINITY(){ return default; }
		static get FLAT(){ return flat; }
		static get AMPLIFIED(){ return amplified; }
		static get LARGE_BIOMES(){ return largeBiomes; }

		constructor(entityId=0, gamemode=0, dimension=0, difficulty=0, maxPlayers=0, levelType="", reducedDebug=false) {
			this.entityId = entityId;
			this.gamemode = gamemode;
			this.dimension = dimension;
			this.difficulty = difficulty;
			this.maxPlayers = maxPlayers;
			this.levelType = levelType;
			this.reducedDebug = reducedDebug;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(entityId);
			this.writeByte(gamemode);
			this.writeBigEndianInt(dimension);
			this.writeByte(difficulty);
			this.writeByte(maxPlayers);
			this.writeString(levelType);
			this.writeBool(reducedDebug);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.JoinGame().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "JoinGame(entityId: " + this.entityId + ", gamemode: " + this.gamemode + ", dimension: " + this.dimension + ", difficulty: " + this.difficulty + ", maxPlayers: " + this.maxPlayers + ", levelType: " + this.levelType + ", reducedDebug: " + this.reducedDebug + ")";
		}

	},

	Map: class {

		static get ID(){ return 36; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(mapId=0, scale=0, showIcons=false, icons=[], colums=0, rows=0, offset={x:0,z:0}, data=[]) {
			this.mapId = mapId;
			this.scale = scale;
			this.showIcons = showIcons;
			this.icons = icons;
			this.colums = colums;
			this.rows = rows;
			this.offset = offset;
			this.data = data;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(mapId);
			this.writeByte(scale);
			this.writeBool(showIcons);
			this.writeVaruint(icons.length); for(awnvbnm in icons){ this.writeBytes(icons[awnvbnm].encode()); }
			this.writeByte(colums);
			this.writeByte(rows);
			this.writeByte(offset.x); this.writeByte(offset.z);
			this.writeVaruint(data.length); for(zgf0yq in data){ this.writeByte(data[zgf0yq]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Map().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Map(mapId: " + this.mapId + ", scale: " + this.scale + ", showIcons: " + this.showIcons + ", icons: " + this.icons + ", colums: " + this.colums + ", rows: " + this.rows + ", offset: " + this.offset + ", data: " + this.data + ")";
		}

	},

	EntityRelativeMove: class {

		static get ID(){ return 37; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, delta={x:0,y:0,z:0}, onGround=false) {
			this.entityId = entityId;
			this.delta = delta;
			this.onGround = onGround;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianShort(delta.x); this.writeBigEndianShort(delta.y); this.writeBigEndianShort(delta.z);
			this.writeBool(onGround);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityRelativeMove().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityRelativeMove(entityId: " + this.entityId + ", delta: " + this.delta + ", onGround: " + this.onGround + ")";
		}

	},

	EntityLookAndRelativeMove: class {

		static get ID(){ return 38; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, delta={x:0,y:0,z:0}, yaw=0, pitch=0, onGround=false) {
			this.entityId = entityId;
			this.delta = delta;
			this.yaw = yaw;
			this.pitch = pitch;
			this.onGround = onGround;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianShort(delta.x); this.writeBigEndianShort(delta.y); this.writeBigEndianShort(delta.z);
			this.writeByte(yaw);
			this.writeByte(pitch);
			this.writeBool(onGround);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityLookAndRelativeMove().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityLookAndRelativeMove(entityId: " + this.entityId + ", delta: " + this.delta + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", onGround: " + this.onGround + ")";
		}

	},

	EntityLook: class {

		static get ID(){ return 39; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, yaw=0, pitch=0, onGround=false) {
			this.entityId = entityId;
			this.yaw = yaw;
			this.pitch = pitch;
			this.onGround = onGround;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeByte(yaw);
			this.writeByte(pitch);
			this.writeBool(onGround);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityLook().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityLook(entityId: " + this.entityId + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", onGround: " + this.onGround + ")";
		}

	},

	Entity: class {

		static get ID(){ return 40; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0) {
			this.entityId = entityId;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Entity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Entity(entityId: " + this.entityId + ")";
		}

	},

	VehicleMove: class {

		static get ID(){ return 41; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position={x:0,y:0,z:0}, yaw=.0, pitch=.0) {
			this.position = position;
			this.yaw = yaw;
			this.pitch = pitch;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeBigEndianFloat(yaw);
			this.writeBigEndianFloat(pitch);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.VehicleMove().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "VehicleMove(position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ")";
		}

	},

	OpenSignEditor: class {

		static get ID(){ return 42; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position=0) {
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(position);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.OpenSignEditor().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "OpenSignEditor(position: " + this.position + ")";
		}

	},

	PlayerAbilities: class {

		static get ID(){ return 43; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// flags
		static get INVULNERABLE(){ return 1; }
		static get FLYING(){ return 2; }
		static get ALLOW_FLYING(){ return 4; }
		static get CREATIVE_MODE(){ return 8; }

		constructor(flags=0, flyingSpeed=.0, fovModifier=.0) {
			this.flags = flags;
			this.flyingSpeed = flyingSpeed;
			this.fovModifier = fovModifier;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(flags);
			this.writeBigEndianFloat(flyingSpeed);
			this.writeBigEndianFloat(fovModifier);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.PlayerAbilities().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerAbilities(flags: " + this.flags + ", flyingSpeed: " + this.flyingSpeed + ", fovModifier: " + this.fovModifier + ")";
		}

	},

	CombatEvent: class {

		static get ID(){ return 44; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(eventId=0) {
			this.eventId = eventId;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(eventId);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.CombatEvent().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "CombatEvent(eventId: " + this.eventId + ")";
		}

	},

	PlayerListItem: class {

		static get ID(){ return 45; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(action=0) {
			this.action = action;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(action);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.PlayerListItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerListItem(action: " + this.action + ")";
		}

	},

	PlayerPositionAndLook: class {

		static get ID(){ return 46; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// flags
		static get X(){ return 1; }
		static get Y(){ return 2; }
		static get Z(){ return 4; }
		static get Y_ROTATION(){ return 8; }
		static get X_ROTATION(){ return 16; }

		constructor(position={x:0,y:0,z:0}, yaw=.0, pitch=.0, flags=0, teleportId=0) {
			this.position = position;
			this.yaw = yaw;
			this.pitch = pitch;
			this.flags = flags;
			this.teleportId = teleportId;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeBigEndianFloat(yaw);
			this.writeBigEndianFloat(pitch);
			this.writeByte(flags);
			this.writeVaruint(teleportId);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.PlayerPositionAndLook().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerPositionAndLook(position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", flags: " + this.flags + ", teleportId: " + this.teleportId + ")";
		}

	},

	UseBed: class {

		static get ID(){ return 47; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, position=0) {
			this.entityId = entityId;
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianLong(position);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.UseBed().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UseBed(entityId: " + this.entityId + ", position: " + this.position + ")";
		}

	},

	DestroyEntities: class {

		static get ID(){ return 48; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityIds=0) {
			this.entityIds = entityIds;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityIds.length); for(zw50axr5swrz in entityIds){ this.writeVaruint(entityIds[zw50axr5swrz]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.DestroyEntities().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "DestroyEntities(entityIds: " + this.entityIds + ")";
		}

	},

	RemoveEntityEffect: class {

		static get ID(){ return 49; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, effectId=0) {
			this.entityId = entityId;
			this.effectId = effectId;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeByte(effectId);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.RemoveEntityEffect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "RemoveEntityEffect(entityId: " + this.entityId + ", effectId: " + this.effectId + ")";
		}

	},

	ResourcePackSend: class {

		static get ID(){ return 50; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(url="", hash="") {
			this.url = url;
			this.hash = hash;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(url);
			this.writeString(hash);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ResourcePackSend().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ResourcePackSend(url: " + this.url + ", hash: " + this.hash + ")";
		}

	},

	Respawn: class {

		static get ID(){ return 51; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// dimension
		static get NETHER(){ return -1; }
		static get OVERWORLD(){ return 0; }
		static get END(){ return 1; }

		// difficulty
		static get PEACEFUL(){ return 0; }
		static get EASY(){ return 1; }
		static get NORMAL(){ return 2; }
		static get HARD(){ return 3; }

		// gamemode
		static get SURVIVAL(){ return 0; }
		static get CREATIVE(){ return 1; }
		static get ADVENTURE(){ return 2; }
		static get SPECTATOR(){ return 3; }

		// level type
		static get INFINITY(){ return default; }
		static get FLAT(){ return flat; }
		static get AMPLIFIED(){ return amplified; }
		static get LARGE_BIOMES(){ return largeBiomes; }

		constructor(dimension=0, difficulty=0, gamemode=0, levelType="") {
			this.dimension = dimension;
			this.difficulty = difficulty;
			this.gamemode = gamemode;
			this.levelType = levelType;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(dimension);
			this.writeByte(difficulty);
			this.writeByte(gamemode);
			this.writeString(levelType);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Respawn().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Respawn(dimension: " + this.dimension + ", difficulty: " + this.difficulty + ", gamemode: " + this.gamemode + ", levelType: " + this.levelType + ")";
		}

	},

	EntityHeadLook: class {

		static get ID(){ return 52; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, headYaw=0) {
			this.entityId = entityId;
			this.headYaw = headYaw;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeByte(headYaw);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityHeadLook().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityHeadLook(entityId: " + this.entityId + ", headYaw: " + this.headYaw + ")";
		}

	},

	WorldBorder: class {

		static get ID(){ return 53; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(action=0) {
			this.action = action;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(action);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.WorldBorder().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "WorldBorder(action: " + this.action + ")";
		}

	},

	Camera: class {

		static get ID(){ return 54; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0) {
			this.entityId = entityId;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Camera().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Camera(entityId: " + this.entityId + ")";
		}

	},

	HeldItemChange: class {

		static get ID(){ return 55; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(slot=0) {
			this.slot = slot;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(slot);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.HeldItemChange().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "HeldItemChange(slot: " + this.slot + ")";
		}

	},

	DisplayScoreboard: class {

		static get ID(){ return 56; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// position
		static get LIST(){ return 0; }
		static get SIDEBAR(){ return 1; }
		static get BELOW_NAME(){ return 2; }

		constructor(position=0, scoreName="") {
			this.position = position;
			this.scoreName = scoreName;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeByte(position);
			this.writeString(scoreName);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.DisplayScoreboard().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "DisplayScoreboard(position: " + this.position + ", scoreName: " + this.scoreName + ")";
		}

	},

	EntityMetadata: class {

		static get ID(){ return 57; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, metadata=null) {
			this.entityId = entityId;
			this.metadata = metadata;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBytes(metadata.encode());
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityMetadata().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityMetadata(entityId: " + this.entityId + ", metadata: " + this.metadata + ")";
		}

	},

	AttachEntity: class {

		static get ID(){ return 58; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(target=0, holder=0) {
			this.target = target;
			this.holder = holder;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianInt(target);
			this.writeBigEndianInt(holder);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.AttachEntity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "AttachEntity(target: " + this.target + ", holder: " + this.holder + ")";
		}

	},

	EntityVelocity: class {

		static get ID(){ return 59; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, velocity={x:0,y:0,z:0}) {
			this.entityId = entityId;
			this.velocity = velocity;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianShort(velocity.x); this.writeBigEndianShort(velocity.y); this.writeBigEndianShort(velocity.z);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityVelocity().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityVelocity(entityId: " + this.entityId + ", velocity: " + this.velocity + ")";
		}

	},

	EntityEquipment: class {

		static get ID(){ return 60; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, slot=0, item=null) {
			this.entityId = entityId;
			this.slot = slot;
			this.item = item;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeVaruint(slot);
			this.writeBytes(item.encode());
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityEquipment().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityEquipment(entityId: " + this.entityId + ", slot: " + this.slot + ", item: " + this.item + ")";
		}

	},

	SetExperience: class {

		static get ID(){ return 61; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(experience=.0, level=0, totalExperience=0) {
			this.experience = experience;
			this.level = level;
			this.totalExperience = totalExperience;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianFloat(experience);
			this.writeVaruint(level);
			this.writeVaruint(totalExperience);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SetExperience().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetExperience(experience: " + this.experience + ", level: " + this.level + ", totalExperience: " + this.totalExperience + ")";
		}

	},

	UpdateHealth: class {

		static get ID(){ return 62; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(health=.0, hunger=0, saturation=.0) {
			this.health = health;
			this.hunger = hunger;
			this.saturation = saturation;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianFloat(health);
			this.writeVaruint(hunger);
			this.writeBigEndianFloat(saturation);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.UpdateHealth().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateHealth(health: " + this.health + ", hunger: " + this.hunger + ", saturation: " + this.saturation + ")";
		}

	},

	ScoreboardObjective: class {

		static get ID(){ return 63; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// mode
		static get CREATE(){ return 0; }
		static get REMOVE(){ return 1; }
		static get UPDATE(){ return 2; }

		// type
		static get NUMERIC(){ return integer; }
		static get GRAPHIC(){ return hearts; }

		constructor(name="", mode=0, value="", type="") {
			this.name = name;
			this.mode = mode;
			this.value = value;
			this.type = type;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(name);
			this.writeByte(mode);
			this.writeString(value);
			this.writeString(type);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.ScoreboardObjective().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "ScoreboardObjective(name: " + this.name + ", mode: " + this.mode + ", value: " + this.value + ", type: " + this.type + ")";
		}

	},

	SetPassengers: class {

		static get ID(){ return 64; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, passengers=0) {
			this.entityId = entityId;
			this.passengers = passengers;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeVaruint(passengers.length); for(cgfzc2vuz2vycw in passengers){ this.writeVaruint(passengers[cgfzc2vuz2vycw]); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SetPassengers().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SetPassengers(entityId: " + this.entityId + ", passengers: " + this.passengers + ")";
		}

	},

	Teams: class {

		static get ID(){ return 65; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(name="", mode=0) {
			this.name = name;
			this.mode = mode;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(name);
			this.writeByte(mode);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Teams().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Teams(name: " + this.name + ", mode: " + this.mode + ")";
		}

	},

	UpdateScore: class {

		static get ID(){ return 66; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// action
		static get UPDATE(){ return 0; }
		static get REMOVE(){ return 1; }

		constructor(scoreName="", action=0, objectiveName="", value=0) {
			this.scoreName = scoreName;
			this.action = action;
			this.objectiveName = objectiveName;
			this.value = value;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(scoreName);
			this.writeByte(action);
			this.writeString(objectiveName);
			this.writeVaruint(value);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.UpdateScore().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "UpdateScore(scoreName: " + this.scoreName + ", action: " + this.action + ", objectiveName: " + this.objectiveName + ", value: " + this.value + ")";
		}

	},

	SpawnPosition: class {

		static get ID(){ return 67; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(position=0) {
			this.position = position;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(position);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SpawnPosition().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SpawnPosition(position: " + this.position + ")";
		}

	},

	TimeUpdate: class {

		static get ID(){ return 68; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(worldAge=0, time=0) {
			this.worldAge = worldAge;
			this.time = time;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeBigEndianLong(worldAge);
			this.writeBigEndianLong(time);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.TimeUpdate().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "TimeUpdate(worldAge: " + this.worldAge + ", time: " + this.time + ")";
		}

	},

	Title: class {

		static get ID(){ return 69; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(action=0) {
			this.action = action;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(action);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.Title().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "Title(action: " + this.action + ")";
		}

	},

	SoundEffect: class {

		static get ID(){ return 70; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(soundId=0, category=0, position={x:0,y:0,z:0}, volume=.0, pitch=.0) {
			this.soundId = soundId;
			this.category = category;
			this.position = position;
			this.volume = volume;
			this.pitch = pitch;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(soundId);
			this.writeVaruint(category);
			this.writeBigEndianInt(position.x); this.writeBigEndianInt(position.y); this.writeBigEndianInt(position.z);
			this.writeBigEndianFloat(volume);
			this.writeBigEndianFloat(pitch);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.SoundEffect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "SoundEffect(soundId: " + this.soundId + ", category: " + this.category + ", position: " + this.position + ", volume: " + this.volume + ", pitch: " + this.pitch + ")";
		}

	},

	PlayerListHeaderAndFooter: class {

		static get ID(){ return 71; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(header="", footer="") {
			this.header = header;
			this.footer = footer;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeString(header);
			this.writeString(footer);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.PlayerListHeaderAndFooter().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "PlayerListHeaderAndFooter(header: " + this.header + ", footer: " + this.footer + ")";
		}

	},

	CollectItem: class {

		static get ID(){ return 72; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(collected=0, collector=0, count=0) {
			this.collected = collected;
			this.collector = collector;
			this.count = count;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(collected);
			this.writeVaruint(collector);
			this.writeVaruint(count);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.CollectItem().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "CollectItem(collected: " + this.collected + ", collector: " + this.collector + ", count: " + this.count + ")";
		}

	},

	EntityTeleport: class {

		static get ID(){ return 73; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, position={x:0,y:0,z:0}, yaw=0, pitch=0, onGround=false) {
			this.entityId = entityId;
			this.position = position;
			this.yaw = yaw;
			this.pitch = pitch;
			this.onGround = onGround;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianDouble(position.x); this.writeBigEndianDouble(position.y); this.writeBigEndianDouble(position.z);
			this.writeByte(yaw);
			this.writeByte(pitch);
			this.writeBool(onGround);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityTeleport().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityTeleport(entityId: " + this.entityId + ", position: " + this.position + ", yaw: " + this.yaw + ", pitch: " + this.pitch + ", onGround: " + this.onGround + ")";
		}

	},

	EntityProperties: class {

		static get ID(){ return 74; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		constructor(entityId=0, attributes=null) {
			this.entityId = entityId;
			this.attributes = attributes;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeBigEndianInt(attributes.length); for(yxr0cmlidxrlcw in attributes){ this.writeBytes(attributes[yxr0cmlidxrlcw].encode()); }
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityProperties().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityProperties(entityId: " + this.entityId + ", attributes: " + this.attributes + ")";
		}

	},

	EntityEffect: class {

		static get ID(){ return 75; }

		static get CLIENTBOUND(){ return true; }
		static get SERVERBOUND(){ return false; }

		// flags
		static get AMBIENT(){ return 1; }
		static get SHOW_PARTICLES(){ return 2; }

		constructor(entityId=0, effectId=0, amplifier=0, duration=0, flags=0) {
			this.entityId = entityId;
			this.effectId = effectId;
			this.amplifier = amplifier;
			this.duration = duration;
			this.flags = flags;
		}

		/** @return {Uint8Array} */
		encode() {
			this.writeVaruint(this.ID);
			this.writeVaruint(entityId);
			this.writeByte(effectId);
			this.writeByte(amplifier);
			this.writeVaruint(duration);
			this.writeByte(flags);
		}

		/** @param {Uint8Array} buffer */
		decode(buffer) {
			if(!(buffer instanceof Uint8Array)) throw new TypeError('buffer is not a Uint8Array');
			return this;
		}

		static fromBuffer(buffer) {
			return new Clientbound.EntityEffect().decode(buffer);
		}

		/** @return {string} */
		toString() {
			return "EntityEffect(entityId: " + this.entityId + ", effectId: " + this.effectId + ", amplifier: " + this.amplifier + ", duration: " + this.duration + ", flags: " + this.flags + ")";
		}

	},

}

//export { Clientbound };
