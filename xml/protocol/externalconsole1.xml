<?xml version="1.0" encoding="utf-8"?>

<protocol>

	<software>External Console</software>

	<protocol>1</protocol>

	<description>
		Protocol used by SEL to communicate with external sources using TCP or web sockets.
	</description>

	<encoding id="ubyte" arraylength="ushort">

		<endianness type="*" value="big-endian" />
		
		<type name="game">
			<field name="type" type="ubyte">
				Type of the game. Minecraft indicates the java version of the game and pocket indicates the versions running on Android, iOS, Windows Phone and Windows 10.
				<constant name="pocket" value="1" />
				<constant name="minecraft" value="2" />
			</field>
			<field name="protocols" type="uint[]">
				List of protocols accepted by the servers for the indicated game.
			</field>
		</type>

		<type name="node-stats">
			Resource usage of a node.
			<field name="name" type="string">
				Name of the node. Should match a name given in [Welcome.Accepted.connectedNodes](#login.welcome.accepted.connected-nodes) or one added using the [UpdateNodes](#status.update-nodes) packet.
			</field>
			<field name="tps" type="float">
				Ticks per second of the node in range 0..20. If the value is less than 20, the server is lagging.
			</field>
			<field name="ram" type="ulong">
				RAM allocated by the node in bytes.
				If the value is 0 the node couldn't retrieve the amount of memory allocated by its process.
			</field>
			<field name="cpu" type="float">
				Percentage of CPU used by the node. The value can be higher than 100 when the machine where the node is running has more than one CPU.
				If the value is `not a number` the node couldn't retrieve the amount of CPU used by its process.
			</field>
		</type>

	</encoding>

	<packets>

		<section name="login">

			<packet name="auth-credentials" id="0" clientbound="true" serverbound="false">
				First packet sent by the server after the connection has been successfully established. It contains informations about how the client should authenticate.
				<field name="protocol" type="ubyte">
					Protocol used by the server. If the client uses a different one it should close the connection without trying to perform authentication.
				</field>
				<field name="hash-algorithm" type="string">
					Algorithm used by the server to match the the hash. The value should be sent in lowercase without any separation symbol (for example `sha256` instead of `SHA-256`).
					If empty no hashing is done and the password is sent raw. See [Auth.hash](#login.auth.hash) for more details.
				</field>
				<field name="payload" type="ubyte[16]">
					Payload to add to the password encoded as UTF-8 (if hash algorithm is not empty) before hashing it, as described in the [Auth.hash](#login.auth.hash) field.
				</field>
			</packet>

			<packet name="auth" id="1" clientbound="false" serverbound="true">
				<field name="hash" type="ubyte[]"></field>
			</packet>

			<packet name="welcome" id="2" clientbound="true" serverbound="false">
				<field name="status" type="ubyte"></field>
				<variants field="status">
					<variant name="accepted" value="0">
						<field name="remote-commands" type="bool"></field>
						<field name="software" type="string"></field>
						<field name="versions" type="ubyte[3]"></field>
						<field name="display-name" type="string"></field>
						<field name="games" type="game[]"></field>
						<field name="connected-nodes" type="string[]"></field>
					</variant>
					<variant name="wrong-hash" value="1">
						Sent when [Auth](#login.auth) is received but the given password or hash doesn't match the server's one.
					</variant>
					<variant name="timed-out" value="2">
						Sent when [Auth](#login.auth) is not received and the server decides to close the connection because too much time has elapsed since the creation of the socket.
					</variant>
				</variants>
			</packet>

		</section>

		<section name="status">

			<packet name="keep-alive" id="0" clientbound="true" serverbound="true">
				Keeps the connection alive and/or calculates the latency. This packet should be sent at least every 5 seconds to avoid the disconnection by the server caused by a timeout and update the latency. The client can send this packet whenever he wants and the server must reply with the same packet with the same field's value.
				<field name="count" type="uint">
					An identifier chosen by the client to calculate the latency.
				</field>
			</packet>

			<packet name="update-nodes" id="1" clientbound="true" serverbound="false">
				Updates the list of the nodes connected to the hub, adding or removing one.
				If the server isn't built following the hub-node structure this packet is never sent.
				<field name="action" type="ubyte">
					Whether the node should be added or removed from the list of connected nodes.
					<constant name="add" value="0" />
					<constant name="remove" value="1" />
				</field>
				<field name="node" type="string">
					Name of the node.
				</field>
			</packet>

			<packet name="update-stats" id="2" clientbound="true" serverbound="false">
				<field name="online-players" type="uint"></field>
				<field name="max-players" type="uint"></field>
				<field name="uptime" type="uint"></field>
				<field name="upload" type="uint"></field>
				<field name="download" type="uint"></field>
				<field name="nodes" type="node-stats[]"></field>
			</packet>

		</section>

		<section name="connected">

			<packet name="console-message" id="3" clientbound="true" serverbound="false">
				Logs a message from the server's console. It may be the output of a command, a debug message or any other message that the server retains able to be seen by the External Console.
				<field name="node" type="string">
					Name of the node that created the log or an empty string if the log was created by the hub or by a server implementation that isn't based on the hub-node structure.
				</field>
				<field name="timestamp" type="ulong">
					Unix timestamp in milliseconds that indicates the exact time when the log has been generated by the server.
					The logs may not arrive in order when the server uses the hub-node structure or another kind of proxy because the logs created by the nodes have to travel a longer distance, which requires more time.
				</field>
				<field name="logger" type="string">
					Name of the logger. It may be the world name if the log has been generated by a world's message (like a broadcast or a chat message), the name of plugin (for example `plugin\test`) or the name of the package/module/class that has generated the log (like `math.vector` or `event.world.player`).
				</field>
				<field name="message" type="string">
					The logged message. It may contain Minecraft's formatting codes which should be translated into appropriate colours and formatting by the client implementation of the console.
				</field>
			</packet>

			<packet name="command" id="4" clientbound="false" serverbound="true">
				Executes a command remotely if the server allows it. If not a [Permission Denied](#connected.permission-denied) is sent back. The ideal client should never send this packet if [remoteCommands](#login.welcome.accepted.remote-commands) field in [Welcome.Accepted](#login.welcome.accepted) is not true.
				<field name="command" type="string">
					Command to execute on the server. On servers that based on the hub-node structure it should start with a slash or a point (hub command) or a node name followed by the command (node command).
				</field>
			</packet>

			<packet name="permission-denied" id="5" clientbound="true" serverbound="false">
				Bodyless packet only sent in response to [Command](#connected.command) when the server doesn't allow the execution of remote commands through the External Console. A well-implemented client should never receive this packet avoiding the use of [Command](#connected.command) if the [remoteCommands](#login.welcome.accepted.remote-command) field is false.
			</packet>

		</section>

	</packets>

</protocol>
