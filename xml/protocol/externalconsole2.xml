<?xml version="1.0" encoding="utf-8"?>

<protocol>

	<software>External Console</software>

	<protocol>2</protocol>

	<released>2017/2/7</released>

	<description>
		Protocol used to communicate with external sources using a raw TCP protocol or [Web Sockets](https://en.wikipedia.org/wiki/WebSocket).

		## Features
		+ Organised remote logs
		+ Execution of remote commands (if the server allows it)
		+ Authentication using password hashing (optional)
		+ Server's resources usage
		+ Support for the hub-node layout

		## What's new from protocol 1
		+ TCP packet are prefixed with their length
		+ Command can know when they generate output

		## Connecting

		### Using raw TCP sockets
		The raw TCP protocol, also referred as "classic", uses a packet-oriented TCP connection, prefixing every packet with its length encoded as a little-endian unsigned 16-bits integer.
		The connection starts with the client sending the string `classic` encoded as UTF-8 to the server, which replies with an [AuthCredentials](#login_auth-credentials) packet and waits for the client to authenticate.

		### Using Web Sockets
		The websocket protocol uses json packets instead of binary ones (with the keys in snake case) and encodes the arrays of bytes ([AuthCredentials.payload](#login_auth-credentials_payload) and [Auth.hash](#login_auth_hash)) into strings using base64. The connection is established like every web socket connection and, if successfull, continues with the [AuthCredentials](#login_auth-credentials) packet sent by the server.
		Example of a connection in javascript:
		```javascript
		var socket = new WebSocket("example.com:19134");
		socket.onmessage = function(event){
		   var json = JSON.parse(event.data);
		   if(json.hash) console.log("The server requires hash " + json.hash_algorithm);
		   else console.log("The server doesn't require hashing");
		}
		```

		## Authenticating
		After receiving the [AuthCredentials](#login_auth-credentials) packet, the external console, if able to perform authentication, has to send the password or its hash through the [Auth](#login_auth) packet and waits for a response, given by the [Welcome](#login_welcome) packet. If the server accepts the external console the status in the packet will be "accepted", the additional fields of the [Welcome.Accepted](#login.welcome.accepted) packet can be read and the external console can proceed keeping the connection alive, sending commands, receiving logs and other updates.

		## Keeping the connection alive
		The server may disconnect the external console after a period of inactivity (which shouldn't be shorter than 8 seconds). For this reason the external console needs to send a [KeepAlive](#status_keep-alive) packet to notify the server that it is still perfectly connected.

		## Server's logs
		Every time a log is created on the server it sends a [ConsoleMessage](#connected_console-message) to the external console that contains informations about when the log was generated, from whom was generated and the log itself.

		## Executing commands
		If the [remoteCommand](#login_welcome_accepted_remote-command) field in the [Welcome.Accepted](#login_welcome.accepted) packet is true, the server allows the execution of commands from the external console. That's done using the [Command](#connected_command) packet, which has only one field that is the raw command.
	</description>

	<encoding id="ubyte" arraylength="ushort">

		<endianness type="*" value="big-endian" />
		
		<type name="game">
			<field name="type" type="ubyte">
				Variant of the game.
				<constant name="pocket" value="1">
					Minecraft: Pocket Edition and derivated
				</constant>
				<constant name="minecraft" value="2">
					Classic minecraft (Java version)
				</constant>
			</field>
			<field name="protocols" type="uint[]">
				List of protocols supported by the server for the indicated game.
			</field>
		</type>

		<type name="node-stats">
			Resources usage of a node.
			<field name="name" type="string">
				Name of the node. Should match one of the names given in [Welcome.Accepted.connectedNodes](#login_welcome_accepted_connected-nodes) or one added using the [UpdateNodes](#status_update-nodes) packet.
				If the server isn't built on the hub-node layout the name is an empty string and the following values are for the whole server and not for a node.
			</field>
			<field name="tps" type="float">
				Ticks per second of the node in range 0 to 20. If the value is less than 20, the server is lagging.
			</field>
			<field name="ram" type="ulong">
				RAM allocated by the node in bytes.
				If the value is 0 the node couldn't retrieve the amount of memory allocated by its process.
			</field>
			<field name="cpu" type="float">
				Percentage of CPU used by the node. The value can be higher than 100 when the machine where the node is running has more than one CPU.
				If the value is `not a number` the node couldn't retrieve the amount of CPU used by its process.
			</field>
		</type>

	</encoding>

	<packets>

		<section name="login">

			Packets used during the authentication process and to exhange the initial server's informations.

			<packet name="auth-credentials" id="0" clientbound="true" serverbound="false">
				First packet sent by the server when the connection is successfully established. It contains informations about how the external console shall authenticate itself.
				<field name="protocol" type="ubyte">
					Protocol used by the server. If the client uses a different one it should close the connection without trying to perform authentication.
				</field>
				<field name="hash" type="bool">
					Whether to perform hashing on the password or not.
				</field>
				<field name="hash-algorithm" type="string" when="hash==true">
					Algorithm used by the server to hash the concatenation of the password and the [payload](#login_auth-credentials_payload). The value should be sent in lower case without any separation symbol (for example `md5` instead of `MD5`, `sha256` instead of `SHA-256`).
					See [Auth.hash](#login_auth_hash) for more details.
				</field>
				<field name="payload" type="ubyte[]" when="hash==true">
					Payload to cancatenate to the password before hashing it, as described in the [Auth.hash](#login.auth.hash)'s field description.
				</field>
			</packet>

			<packet name="auth" id="1" clientbound="false" serverbound="true">
				Performs authentication following the instruncions given by the [AuthCredentials](#login_auth-credentials) packet.
				<field name="hash" type="ubyte[]">
					Pasword encoded as UTF-8 if [AuthCredentials.hash](#login.auth_credentials_auth) is `false` or the hash (specified in [AuthCredentials.hashAlgorithm](#login_auth-credentials_hash-algorithm)) of the password encoded as UTF-8 concatenated with the bytes from [AuthCredentials.payload](#login_auth-credentials_payload) if `true`.
					The hash can be done with a function (if hashAlgorithm is `sha1`) in D:
					```d
					sha1Of(cast(ubyte[])password ~ authCredentials.payload);
					```
					Or using `MessageDigest` in Java:
					```java
					MessageDigest md = MessageDigest.getInstance(authCredentials.hashAlgorithm);
					md.update(password.getBytes(StandardCharsets.UTF_8));
					md.update(authCredentials.payload);
					byte[] hash = md.digest();
					```
				</field>
			</packet>

			<packet name="welcome" id="2" clientbound="true" serverbound="false">
				Indicates the status of the authentication process.
				<field name="status" type="ubyte"></field>
				<variants field="status">
					<variant name="accepted" value="0">
						Sent when the hash sent in [Auth](#login_auth) matches the server's.
						<field name="remote-commands" type="bool">
							Indicates whether the external console can execute command remotely through the [Command](#connected_command) packet.
						</field>
						<field name="software" type="string">
							The server's software as a formatted string (without the version).
						</field>
						<field name="versions" type="ubyte[3]">
							Versions of the server in a 3-btyes array readed as `[major, minor, release]`.
						</field>
						<field name="display-name" type="string">
							Name of the server (not the game's MOTD!). It shouldn't contain Minecraft formatting codes.
						</field>
						<field name="games" type="game[]">
							Informations about the games and their protocols supported by the server.
						</field>
						<field name="connected-nodes" type="string[]">
							List of names of the nodes connected to the server, if it uses the hub-node layout, or an empty list.
						</field>
					</variant>
					<variant name="wrong-hash" value="1">
						Sent when [Auth](#login_auth) is received but the given password or hash doesn't match the server's one.
					</variant>
					<variant name="timed-out" value="2">
						Sent when [Auth](#login_auth) is not received and the server decides to close the connection because too much time has elapsed since the creation of the socket.
					</variant>
				</variants>
			</packet>

		</section>

		<section name="status">

			Packets about the informations and the usage of the server.

			<packet name="keep-alive" id="0" clientbound="true" serverbound="true">
				Keeps the connection alive and/or calculates the latency. This packet should be sent at least every 5 seconds to avoid the disconnection caused by timeout and update the latency. The external console can send this packet whenever it wants it and the server must reply with the same packet with the same field's value.
				<field name="count" type="uint">
					An identifier chosen by the external console to uniquely identify the packet.
				</field>
			</packet>

			<packet name="update-nodes" id="1" clientbound="true" serverbound="false">
				Updates the list of the nodes connected to the hub, adding or removing one.
				If the server isn't built on the hub-node layout this packet is never sent.
				<field name="action" type="ubyte">
					Whether the node should be added or removed from the list of connected nodes.
					<constant name="add" value="0" />
					<constant name="remove" value="1" />
				</field>
				<field name="node" type="string">
					Name of the node.
				</field>
			</packet>

			<packet name="request-stats" id="2" clientbound="false" serverbound="true">
				Requests an [UpdateStats](#stats_update-stats) packet to the server, which should sent it immediately instead of waiting for the next automatic update (if the server does one).
			</packet>

			<packet name="update-stats" id="3" clientbound="true" serverbound="false">
				Updates the statistics about the usage of the server and, eventually, the connected nodes.
				This packet is sent in response to [RequestStats](#status_request-stats) and every time the server retains that the stats should be updated (usually in a range of 5 to 30 seconds).
				<field name="online-players" type="uint">
					Number of players currently online on the server. Players that are performing authentication are not included in the count.
				</field>
				<field name="max-players" type="uint">
					Highest number of players that can join the server simultaneously. If 0, there is not maximum number of players.
				</field>
				<field name="uptime" type="uint">
					Milliseconds since the server has started.
				</field>
				<field name="upload" type="uint">
					Average amount of bytes sent every second.
				</field>
				<field name="download" type="uint">
					Average amount of bytes sent every second.
				</field>
				<field name="nodes" type="node-stats[]">
					Resources usage of the connected nodes, if the server uses the hub-node layout, or an empty list.
				</field>
			</packet>

		</section>

		<section name="connected">

			Packets regarding the server's console and commands.

			<packet name="console-message" id="4" clientbound="true" serverbound="false">
				Logs a message from the server's console. It may be the output of a command, a debug message or any other message that the server retains able to be seen by the External Console.
				<field name="node" type="string">
					Name of the node that created the log or an empty string if the log was created by the hub or by a server that isn't based on the hub-node layout.
				</field>
				<field name="timestamp" type="ulong">
					Unix timestamp in milliseconds that indicates the exact time when the log was generated by the server.
					The logs may not arrive in order when the server uses the hub-node layout or some other kind of proxy because the logs created by the nodes have an additional latency (the one between the hub, or proxy, and the node).
				</field>
				<field name="logger" type="string">
					Name of the logger. It may be the world name if the log was generated by a world's message (like a broadcast or a chat message), the name of plugin (for example `plugin\test`) or the name of the package/module/class that generated the log (like `math.vector` or `event.world.player`).
				</field>
				<field name="message" type="string">
					The logged message. It may contain Minecraft's formatting codes which should be translated into appropriate colours and formatting (bold, italic and strikethrough) by the client implementation of the external console.
				</field>
				<field name="command-id" type="int">
					Identifier given in [Command.commandId](#connected_command_command-id) if the log was generated by a command sent by the external console or -1 if the log was not related to a command sent from the external console.
				</field>
			</packet>

			<packet name="command" id="5" clientbound="false" serverbound="true">
				Executes a command remotely if the server allows it. If not a [Permission Denied](#connected_permission-denied) is sent back. A good implementation of the external console client should never send this packet if [remoteCommands](#login_welcome_accepted_remote-commands) field in [Welcome.Accepted](#login.welcome.accepted) is not true.
				<field name="command" type="string">
					Command to execute on the server.
				</field>
				<field name="command-id" type="uint">
					Identifier for the command that will be sent in [ConsoleMessage.commandId](#connected_console-message_command-id) if the command generates an output.
				</field>
			</packet>

			<packet name="permission-denied" id="6" clientbound="true" serverbound="false">
				Bodyless packet only sent in response to [Command](#connected_command) when the server doesn't allow the execution of remote commands through the external console. A good implementation of the external console client should never receive this packet avoiding the use of the [Command](#connected_command) packet when the [remoteCommands](#login_welcome_accepted_remote-command) field is false.
			</packet>

		</section>

	</packets>

</protocol>
